### This file was generated by tcl_odl from 'schema.mtl'
###
### It contains procs to create and delete objects,
### and to create local variables for their members.
###

### Module madrigal


proc objdisp_madrigal {handle cmd args} {
   upvar #0 ${handle}_array local_array

   if { $cmd == "configure" } {
      foreach { opt val } $args {
         if { ![regexp {^-(.+)} $opt dummy small_opt] } {
         } else {
            set local_array($small_opt) $val
         }
      }
      return 1
   }

   if { $cmd == "cget" } {
      set opt [lindex $args 0]
      if { ![regexp {^-(.+)} $opt dummy small_opt] } {
         puts "Wrong or missing option name $opt"
         return ""
      }
      return $local_array($small_opt)
   }

   if { $cmd == "print" } {
      if { [ llength $args ] == 0 } {
         return [ eval madrigal_print $handle ]
      } else {
         return [ eval madrigal_print $handle $args ]
      }
   }

   puts "Unknown command $cmd"
}

proc madrigal {handle args} {
   # Remember the object's type:
   global odl_types_array
   set odl_types_array($handle) madrigal

   # Install the array of object parameters:
   global ${handle}_array
   set ${handle}_array(madroot) "0"
   set ${handle}_array(makesolaris) "0"
   set ${handle}_array(ccsolaris) "0"
   set ${handle}_array(fcsolaris) "0"
   set ${handle}_array(makegnu) "0"
   set ${handle}_array(ccgnu) "0"
   set ${handle}_array(fcgnu) "0"
   set ${handle}_array(tcllibdir) "0"
   set ${handle}_array(tklibdir) "0"
   set ${handle}_array(tcllib) "0"
   set ${handle}_array(tklib) "0"
   set ${handle}_array(tclinclude) "0"
   set ${handle}_array(tkinclude) "0"
   set ${handle}_array(tclsh) "0"
   set ${handle}_array(tcllibpath) "0"
   set ${handle}_array(madserver) "0"
   set ${handle}_array(madserverroot) "0"
   set ${handle}_array(madservercgi) "0"
   set ${handle}_array(madserverservlet) "0"
   set ${handle}_array(madserverdocabs) "0"
   set ${handle}_array(madservercgiabs) "0"
   set ${handle}_array(madserverservletabs) "0"
   set ${handle}_array(siteid) "0"
   set ${handle}_array(htmlstyl) "0"
   set ${handle}_array(indexhead) "0"
   set ${handle}_array(contact) "0"
   set ${handle}_array(notesmanager) "0"


   # Install a proc that will serve as the "object command":
   proc $handle {cmd args} "return \[eval objdisp_madrigal $handle \$cmd \$args\]"

   # Now configure using the other args:
   eval $handle configure $args

   # Call the object's initialization proc
   madrigal_init $handle
}



proc madrigal_delete {handle} {

   # Call the object's exit proc
   madrigal_exit $handle
   catch { rename $handle {} }
   global ${handle}_array
   unset ${handle}_array
}



proc objdisp_metadata {handle cmd args} {
   upvar #0 ${handle}_array local_array

   if { $cmd == "configure" } {
      foreach { opt val } $args {
         if { ![regexp {^-(.+)} $opt dummy small_opt] } {
         } else {
            set local_array($small_opt) $val
         }
      }
      return 1
   }

   if { $cmd == "cget" } {
      set opt [lindex $args 0]
      if { ![regexp {^-(.+)} $opt dummy small_opt] } {
         puts "Wrong or missing option name $opt"
         return ""
      }
      return $local_array($small_opt)
   }

   if { $cmd == "print" } {
      if { [ llength $args ] == 0 } {
         return [ eval metadata_print $handle ]
      } else {
         return [ eval metadata_print $handle $args ]
      }
   }

   puts "Unknown command $cmd"
}

proc metadata {handle args} {
   # Remember the object's type:
   global odl_types_array
   set odl_types_array($handle) metadata

   # Install the array of object parameters:
   global ${handle}_array
   set ${handle}_array(metadataDirectory) "0"
   set ${handle}_array(madroot) "0"
   set ${handle}_array(makesolaris) "0"
   set ${handle}_array(ccsolaris) "0"
   set ${handle}_array(fcsolaris) "0"
   set ${handle}_array(makegnu) "0"
   set ${handle}_array(ccgnu) "0"
   set ${handle}_array(fcgnu) "0"
   set ${handle}_array(tcllibdir) "0"
   set ${handle}_array(tklibdir) "0"
   set ${handle}_array(tcllib) "0"
   set ${handle}_array(tklib) "0"
   set ${handle}_array(tclinclude) "0"
   set ${handle}_array(tkinclude) "0"
   set ${handle}_array(tclsh) "0"
   set ${handle}_array(tcllibpath) "0"
   set ${handle}_array(madserver) "0"
   set ${handle}_array(madserverroot) "0"
   set ${handle}_array(madservercgi) "0"
   set ${handle}_array(madserverservlet) "0"
   set ${handle}_array(madserverdocabs) "0"
   set ${handle}_array(madservercgiabs) "0"
   set ${handle}_array(madserverservletabs) "0"
   set ${handle}_array(siteid) "0"
   set ${handle}_array(htmlstyl) "0"
   set ${handle}_array(indexhead) "0"
   set ${handle}_array(contact) "0"
   set ${handle}_array(notesmanager) "0"


   # Install a proc that will serve as the "object command":
   proc $handle {cmd args} "return \[eval objdisp_metadata $handle \$cmd \$args\]"

   # Now configure using the other args:
   eval $handle configure $args

   # Call the object's initialization proc
   metadata_init $handle
}



proc metadata_delete {handle} {

   # Call the object's exit proc
   metadata_exit $handle
   catch { rename $handle {} }
   global ${handle}_array
   unset ${handle}_array
}



proc objdisp_madExperiment {handle cmd args} {
   upvar #0 ${handle}_array local_array

   if { $cmd == "configure" } {
      foreach { opt val } $args {
         if { ![regexp {^-(.+)} $opt dummy small_opt] } {
         } else {
            set local_array($small_opt) $val
         }
      }
      return 1
   }

   if { $cmd == "cget" } {
      set opt [lindex $args 0]
      if { ![regexp {^-(.+)} $opt dummy small_opt] } {
         puts "Wrong or missing option name $opt"
         return ""
      }
      return $local_array($small_opt)
   }

   if { $cmd == "read" } {
      if { [ llength $args ] == 0 } {
         return [ eval madExperiment_read $handle ]
      } else {
         return [ eval madExperiment_read $handle $args ]
      }
   }

   if { $cmd == "write" } {
      if { [ llength $args ] == 0 } {
         return [ eval madExperiment_write $handle ]
      } else {
         return [ eval madExperiment_write $handle $args ]
      }
   }

   if { $cmd == "getFileEntries" } {
      if { [ llength $args ] == 0 } {
         return [ eval madExperiment_getFileEntries $handle ]
      } else {
         return [ eval madExperiment_getFileEntries $handle $args ]
      }
   }

   if { $cmd == "getDataEntries" } {
      if { [ llength $args ] == 0 } {
         return [ eval madExperiment_getDataEntries $handle ]
      } else {
         return [ eval madExperiment_getDataEntries $handle $args ]
      }
   }

   if { $cmd == "new" } {
      if { [ llength $args ] == 0 } {
         return [ eval madExperiment_new $handle ]
      } else {
         return [ eval madExperiment_new $handle $args ]
      }
   }

   if { $cmd == "generateFromFile" } {
      if { [ llength $args ] == 0 } {
         return [ eval madExperiment_generateFromFile $handle ]
      } else {
         return [ eval madExperiment_generateFromFile $handle $args ]
      }
   }

   if { $cmd == "updateFromFile" } {
      if { [ llength $args ] == 0 } {
         return [ eval madExperiment_updateFromFile $handle ]
      } else {
         return [ eval madExperiment_updateFromFile $handle $args ]
      }
   }

   if { $cmd == "addFile" } {
      if { [ llength $args ] == 0 } {
         return [ eval madExperiment_addFile $handle ]
      } else {
         return [ eval madExperiment_addFile $handle $args ]
      }
   }

   if { $cmd == "addData" } {
      if { [ llength $args ] == 0 } {
         return [ eval madExperiment_addData $handle ]
      } else {
         return [ eval madExperiment_addData $handle $args ]
      }
   }

   if { $cmd == "print" } {
      if { [ llength $args ] == 0 } {
         return [ eval madExperiment_print $handle ]
      } else {
         return [ eval madExperiment_print $handle $args ]
      }
   }

   puts "Unknown command $cmd"
}

proc madExperiment {handle args} {
   # Remember the object's type:
   global odl_types_array
   set odl_types_array($handle) madExperiment

   # Install the array of object parameters:
   global ${handle}_array
   set ${handle}_array(id) "0"
   set ${handle}_array(url) "http://www.openmadrigal.org"
   set ${handle}_array(name) "WLS"
   set ${handle}_array(siteID) "0"
   set ${handle}_array(startDate) "20000101"
   set ${handle}_array(startTime) "000000"
   set ${handle}_array(endDate) "20000101"
   set ${handle}_array(endTime) "240000"
   set ${handle}_array(instrumentCode) "0"
   set ${handle}_array(securityCode) "0"
   set ${handle}_array(files) ""
   set ${handle}_array(data) ""
   set ${handle}_array(expName) "2000/mlh/01jan00"
   set ${handle}_array(expPath) ""
   set ${handle}_array(madroot) "0"
   set ${handle}_array(makesolaris) "0"
   set ${handle}_array(ccsolaris) "0"
   set ${handle}_array(fcsolaris) "0"
   set ${handle}_array(makegnu) "0"
   set ${handle}_array(ccgnu) "0"
   set ${handle}_array(fcgnu) "0"
   set ${handle}_array(tcllibdir) "0"
   set ${handle}_array(tklibdir) "0"
   set ${handle}_array(tcllib) "0"
   set ${handle}_array(tklib) "0"
   set ${handle}_array(tclinclude) "0"
   set ${handle}_array(tkinclude) "0"
   set ${handle}_array(tclsh) "0"
   set ${handle}_array(tcllibpath) "0"
   set ${handle}_array(madserver) "0"
   set ${handle}_array(madserverroot) "0"
   set ${handle}_array(madservercgi) "0"
   set ${handle}_array(madserverservlet) "0"
   set ${handle}_array(madserverdocabs) "0"
   set ${handle}_array(madservercgiabs) "0"
   set ${handle}_array(madserverservletabs) "0"
   set ${handle}_array(siteid) "0"
   set ${handle}_array(htmlstyl) "0"
   set ${handle}_array(indexhead) "0"
   set ${handle}_array(contact) "0"
   set ${handle}_array(notesmanager) "0"


   # Install a proc that will serve as the "object command":
   proc $handle {cmd args} "return \[eval objdisp_madExperiment $handle \$cmd \$args\]"

   # Now configure using the other args:
   eval $handle configure $args

   # Call the object's initialization proc
   madExperiment_init $handle
}



proc madExperiment_delete {handle} {

   # Call the object's exit proc
   madExperiment_exit $handle
   catch { rename $handle {} }
   global ${handle}_array
   unset ${handle}_array
}



proc objdisp_madRec {handle cmd args} {
   upvar #0 ${handle}_array local_array

   if { $cmd == "configure" } {
      foreach { opt val } $args {
         if { ![regexp {^-(.+)} $opt dummy small_opt] } {
         } else {
            set local_array($small_opt) $val
         }
      }
      return 1
   }

   if { $cmd == "cget" } {
      set opt [lindex $args 0]
      if { ![regexp {^-(.+)} $opt dummy small_opt] } {
         puts "Wrong or missing option name $opt"
         return ""
      }
      return $local_array($small_opt)
   }

   if { $cmd == "open" } {
      if { [ llength $args ] == 0 } {
         return [ eval madRec_open $handle ]
      } else {
         return [ eval madRec_open $handle $args ]
      }
   }

   if { $cmd == "print" } {
      if { [ llength $args ] == 0 } {
         return [ eval madRec_print $handle ]
      } else {
         return [ eval madRec_print $handle $args ]
      }
   }

   puts "Unknown command $cmd"
}

proc madRec {handle args} {
   # Remember the object's type:
   global odl_types_array
   set odl_types_array($handle) madRec

   # Install the array of object parameters:
   global ${handle}_array
   set ${handle}_array(fileName) ""
   set ${handle}_array(startYear) "0"
   set ${handle}_array(startMonth) "0"
   set ${handle}_array(startDay) "0"
   set ${handle}_array(startHour) "0"
   set ${handle}_array(startMinute) "0"
   set ${handle}_array(startSecond) "0"
   set ${handle}_array(endYear) "0"
   set ${handle}_array(endMonth) "0"
   set ${handle}_array(endDay) "0"
   set ${handle}_array(endHour) "0"
   set ${handle}_array(endMinute) "0"
   set ${handle}_array(endSecond) "0"
   set ${handle}_array(startJulianDay) "0"
   set ${handle}_array(endJulianDay) "0"
   set ${handle}_array(kinst) "0"
   set ${handle}_array(kindat) "0"
   set ${handle}_array(madroot) "0"
   set ${handle}_array(makesolaris) "0"
   set ${handle}_array(ccsolaris) "0"
   set ${handle}_array(fcsolaris) "0"
   set ${handle}_array(makegnu) "0"
   set ${handle}_array(ccgnu) "0"
   set ${handle}_array(fcgnu) "0"
   set ${handle}_array(tcllibdir) "0"
   set ${handle}_array(tklibdir) "0"
   set ${handle}_array(tcllib) "0"
   set ${handle}_array(tklib) "0"
   set ${handle}_array(tclinclude) "0"
   set ${handle}_array(tkinclude) "0"
   set ${handle}_array(tclsh) "0"
   set ${handle}_array(tcllibpath) "0"
   set ${handle}_array(madserver) "0"
   set ${handle}_array(madserverroot) "0"
   set ${handle}_array(madservercgi) "0"
   set ${handle}_array(madserverservlet) "0"
   set ${handle}_array(madserverdocabs) "0"
   set ${handle}_array(madservercgiabs) "0"
   set ${handle}_array(madserverservletabs) "0"
   set ${handle}_array(siteid) "0"
   set ${handle}_array(htmlstyl) "0"
   set ${handle}_array(indexhead) "0"
   set ${handle}_array(contact) "0"
   set ${handle}_array(notesmanager) "0"
   set ${handle}_array(hasCatalog) "0"
   set ${handle}_array(hasHeader) "0"


   # Install a proc that will serve as the "object command":
   proc $handle {cmd args} "return \[eval objdisp_madRec $handle \$cmd \$args\]"

   # Now configure using the other args:
   eval $handle configure $args

   # Call the object's initialization proc
   madRec_init $handle
}



proc madRec_delete {handle} {

   # Call the object's exit proc
   madRec_exit $handle
   catch { rename $handle {} }
   global ${handle}_array
   unset ${handle}_array
}



proc objdisp_madInstrument {handle cmd args} {
   upvar #0 ${handle}_array local_array

   if { $cmd == "configure" } {
      foreach { opt val } $args {
         if { ![regexp {^-(.+)} $opt dummy small_opt] } {
         } else {
            set local_array($small_opt) $val
         }
      }
      return 1
   }

   if { $cmd == "cget" } {
      set opt [lindex $args 0]
      if { ![regexp {^-(.+)} $opt dummy small_opt] } {
         puts "Wrong or missing option name $opt"
         return ""
      }
      return $local_array($small_opt)
   }

   if { $cmd == "read" } {
      if { [ llength $args ] == 0 } {
         return [ eval madInstrument_read $handle ]
      } else {
         return [ eval madInstrument_read $handle $args ]
      }
   }

   if { $cmd == "write" } {
      if { [ llength $args ] == 0 } {
         return [ eval madInstrument_write $handle ]
      } else {
         return [ eval madInstrument_write $handle $args ]
      }
   }

   if { $cmd == "getEntries" } {
      if { [ llength $args ] == 0 } {
         return [ eval madInstrument_getEntries $handle ]
      } else {
         return [ eval madInstrument_getEntries $handle $args ]
      }
   }

   if { $cmd == "print" } {
      if { [ llength $args ] == 0 } {
         return [ eval madInstrument_print $handle ]
      } else {
         return [ eval madInstrument_print $handle $args ]
      }
   }

   puts "Unknown command $cmd"
}

proc madInstrument {handle args} {
   # Remember the object's type:
   global odl_types_array
   set odl_types_array($handle) madInstrument

   # Install the array of object parameters:
   global ${handle}_array
   set ${handle}_array(fileName) ""
   set ${handle}_array(code) ""
   set ${handle}_array(mnemonic) ""
   set ${handle}_array(name) ""
   set ${handle}_array(latitude) ""
   set ${handle}_array(longitude) ""
   set ${handle}_array(contactName) ""
   set ${handle}_array(contactAddress1) ""
   set ${handle}_array(contactAddress2) ""
   set ${handle}_array(contactAddress3) ""
   set ${handle}_array(contactCity) ""
   set ${handle}_array(contactState) ""
   set ${handle}_array(contactPostalCode) ""
   set ${handle}_array(contactCountry) ""
   set ${handle}_array(contactTelephone) ""
   set ${handle}_array(contactEmail) ""
   set ${handle}_array(metadataDirectory) "0"
   set ${handle}_array(madroot) "0"
   set ${handle}_array(makesolaris) "0"
   set ${handle}_array(ccsolaris) "0"
   set ${handle}_array(fcsolaris) "0"
   set ${handle}_array(makegnu) "0"
   set ${handle}_array(ccgnu) "0"
   set ${handle}_array(fcgnu) "0"
   set ${handle}_array(tcllibdir) "0"
   set ${handle}_array(tklibdir) "0"
   set ${handle}_array(tcllib) "0"
   set ${handle}_array(tklib) "0"
   set ${handle}_array(tclinclude) "0"
   set ${handle}_array(tkinclude) "0"
   set ${handle}_array(tclsh) "0"
   set ${handle}_array(tcllibpath) "0"
   set ${handle}_array(madserver) "0"
   set ${handle}_array(madserverroot) "0"
   set ${handle}_array(madservercgi) "0"
   set ${handle}_array(madserverservlet) "0"
   set ${handle}_array(madserverdocabs) "0"
   set ${handle}_array(madservercgiabs) "0"
   set ${handle}_array(madserverservletabs) "0"
   set ${handle}_array(siteid) "0"
   set ${handle}_array(htmlstyl) "0"
   set ${handle}_array(indexhead) "0"
   set ${handle}_array(contact) "0"
   set ${handle}_array(notesmanager) "0"


   # Install a proc that will serve as the "object command":
   proc $handle {cmd args} "return \[eval objdisp_madInstrument $handle \$cmd \$args\]"

   # Now configure using the other args:
   eval $handle configure $args

   # Call the object's initialization proc
   madInstrument_init $handle
}



proc madInstrument_delete {handle} {

   # Call the object's exit proc
   madInstrument_exit $handle
   catch { rename $handle {} }
   global ${handle}_array
   unset ${handle}_array
}



proc objdisp_madSite {handle cmd args} {
   upvar #0 ${handle}_array local_array

   if { $cmd == "configure" } {
      foreach { opt val } $args {
         if { ![regexp {^-(.+)} $opt dummy small_opt] } {
         } else {
            set local_array($small_opt) $val
         }
      }
      return 1
   }

   if { $cmd == "cget" } {
      set opt [lindex $args 0]
      if { ![regexp {^-(.+)} $opt dummy small_opt] } {
         puts "Wrong or missing option name $opt"
         return ""
      }
      return $local_array($small_opt)
   }

   if { $cmd == "read" } {
      if { [ llength $args ] == 0 } {
         return [ eval madSite_read $handle ]
      } else {
         return [ eval madSite_read $handle $args ]
      }
   }

   if { $cmd == "write" } {
      if { [ llength $args ] == 0 } {
         return [ eval madSite_write $handle ]
      } else {
         return [ eval madSite_write $handle $args ]
      }
   }

   if { $cmd == "getEntries" } {
      if { [ llength $args ] == 0 } {
         return [ eval madSite_getEntries $handle ]
      } else {
         return [ eval madSite_getEntries $handle $args ]
      }
   }

   if { $cmd == "print" } {
      if { [ llength $args ] == 0 } {
         return [ eval madSite_print $handle ]
      } else {
         return [ eval madSite_print $handle $args ]
      }
   }

   puts "Unknown command $cmd"
}

proc madSite {handle args} {
   # Remember the object's type:
   global odl_types_array
   set odl_types_array($handle) madSite

   # Install the array of object parameters:
   global ${handle}_array
   set ${handle}_array(fileName) ""
   set ${handle}_array(id) ""
   set ${handle}_array(name) ""
   set ${handle}_array(server) ""
   set ${handle}_array(documentRoot) ""
   set ${handle}_array(cgiDirectory) ""
   set ${handle}_array(servletDirectory) ""
   set ${handle}_array(contactName) ""
   set ${handle}_array(contactAddress1) ""
   set ${handle}_array(contactAddress2) ""
   set ${handle}_array(contactAddress3) ""
   set ${handle}_array(contactCity) ""
   set ${handle}_array(contactState) ""
   set ${handle}_array(contactPostalCode) ""
   set ${handle}_array(contactCountry) ""
   set ${handle}_array(contactTelephone) ""
   set ${handle}_array(contactEmail) ""
   set ${handle}_array(metadataDirectory) "0"
   set ${handle}_array(madroot) "0"
   set ${handle}_array(makesolaris) "0"
   set ${handle}_array(ccsolaris) "0"
   set ${handle}_array(fcsolaris) "0"
   set ${handle}_array(makegnu) "0"
   set ${handle}_array(ccgnu) "0"
   set ${handle}_array(fcgnu) "0"
   set ${handle}_array(tcllibdir) "0"
   set ${handle}_array(tklibdir) "0"
   set ${handle}_array(tcllib) "0"
   set ${handle}_array(tklib) "0"
   set ${handle}_array(tclinclude) "0"
   set ${handle}_array(tkinclude) "0"
   set ${handle}_array(tclsh) "0"
   set ${handle}_array(tcllibpath) "0"
   set ${handle}_array(madserver) "0"
   set ${handle}_array(madserverroot) "0"
   set ${handle}_array(madservercgi) "0"
   set ${handle}_array(madserverservlet) "0"
   set ${handle}_array(madserverdocabs) "0"
   set ${handle}_array(madservercgiabs) "0"
   set ${handle}_array(madserverservletabs) "0"
   set ${handle}_array(siteid) "0"
   set ${handle}_array(htmlstyl) "0"
   set ${handle}_array(indexhead) "0"
   set ${handle}_array(contact) "0"
   set ${handle}_array(notesmanager) "0"


   # Install a proc that will serve as the "object command":
   proc $handle {cmd args} "return \[eval objdisp_madSite $handle \$cmd \$args\]"

   # Now configure using the other args:
   eval $handle configure $args

   # Call the object's initialization proc
   madSite_init $handle
}



proc madSite_delete {handle} {

   # Call the object's exit proc
   madSite_exit $handle
   catch { rename $handle {} }
   global ${handle}_array
   unset ${handle}_array
}



proc objdisp_madDataType {handle cmd args} {
   upvar #0 ${handle}_array local_array

   if { $cmd == "configure" } {
      foreach { opt val } $args {
         if { ![regexp {^-(.+)} $opt dummy small_opt] } {
         } else {
            set local_array($small_opt) $val
         }
      }
      return 1
   }

   if { $cmd == "cget" } {
      set opt [lindex $args 0]
      if { ![regexp {^-(.+)} $opt dummy small_opt] } {
         puts "Wrong or missing option name $opt"
         return ""
      }
      return $local_array($small_opt)
   }

   if { $cmd == "read" } {
      if { [ llength $args ] == 0 } {
         return [ eval madDataType_read $handle ]
      } else {
         return [ eval madDataType_read $handle $args ]
      }
   }

   if { $cmd == "write" } {
      if { [ llength $args ] == 0 } {
         return [ eval madDataType_write $handle ]
      } else {
         return [ eval madDataType_write $handle $args ]
      }
   }

   if { $cmd == "getEntries" } {
      if { [ llength $args ] == 0 } {
         return [ eval madDataType_getEntries $handle ]
      } else {
         return [ eval madDataType_getEntries $handle $args ]
      }
   }

   if { $cmd == "print" } {
      if { [ llength $args ] == 0 } {
         return [ eval madDataType_print $handle ]
      } else {
         return [ eval madDataType_print $handle $args ]
      }
   }

   puts "Unknown command $cmd"
}

proc madDataType {handle args} {
   # Remember the object's type:
   global odl_types_array
   set odl_types_array($handle) madDataType

   # Install the array of object parameters:
   global ${handle}_array
   set ${handle}_array(fileName) ""
   set ${handle}_array(code) ""
   set ${handle}_array(description) ""
   set ${handle}_array(metadataDirectory) "0"
   set ${handle}_array(madroot) "0"
   set ${handle}_array(makesolaris) "0"
   set ${handle}_array(ccsolaris) "0"
   set ${handle}_array(fcsolaris) "0"
   set ${handle}_array(makegnu) "0"
   set ${handle}_array(ccgnu) "0"
   set ${handle}_array(fcgnu) "0"
   set ${handle}_array(tcllibdir) "0"
   set ${handle}_array(tklibdir) "0"
   set ${handle}_array(tcllib) "0"
   set ${handle}_array(tklib) "0"
   set ${handle}_array(tclinclude) "0"
   set ${handle}_array(tkinclude) "0"
   set ${handle}_array(tclsh) "0"
   set ${handle}_array(tcllibpath) "0"
   set ${handle}_array(madserver) "0"
   set ${handle}_array(madserverroot) "0"
   set ${handle}_array(madservercgi) "0"
   set ${handle}_array(madserverservlet) "0"
   set ${handle}_array(madserverdocabs) "0"
   set ${handle}_array(madservercgiabs) "0"
   set ${handle}_array(madserverservletabs) "0"
   set ${handle}_array(siteid) "0"
   set ${handle}_array(htmlstyl) "0"
   set ${handle}_array(indexhead) "0"
   set ${handle}_array(contact) "0"
   set ${handle}_array(notesmanager) "0"


   # Install a proc that will serve as the "object command":
   proc $handle {cmd args} "return \[eval objdisp_madDataType $handle \$cmd \$args\]"

   # Now configure using the other args:
   eval $handle configure $args

   # Call the object's initialization proc
   madDataType_init $handle
}



proc madDataType_delete {handle} {

   # Call the object's exit proc
   madDataType_exit $handle
   catch { rename $handle {} }
   global ${handle}_array
   unset ${handle}_array
}



proc objdisp_madExp {handle cmd args} {
   upvar #0 ${handle}_array local_array

   if { $cmd == "configure" } {
      foreach { opt val } $args {
         if { ![regexp {^-(.+)} $opt dummy small_opt] } {
         } else {
            set local_array($small_opt) $val
         }
      }
      return 1
   }

   if { $cmd == "cget" } {
      set opt [lindex $args 0]
      if { ![regexp {^-(.+)} $opt dummy small_opt] } {
         puts "Wrong or missing option name $opt"
         return ""
      }
      return $local_array($small_opt)
   }

   if { $cmd == "read" } {
      if { [ llength $args ] == 0 } {
         return [ eval madExp_read $handle ]
      } else {
         return [ eval madExp_read $handle $args ]
      }
   }

   if { $cmd == "write" } {
      if { [ llength $args ] == 0 } {
         return [ eval madExp_write $handle ]
      } else {
         return [ eval madExp_write $handle $args ]
      }
   }

   if { $cmd == "print" } {
      if { [ llength $args ] == 0 } {
         return [ eval madExp_print $handle ]
      } else {
         return [ eval madExp_print $handle $args ]
      }
   }

   puts "Unknown command $cmd"
}

proc madExp {handle args} {
   # Remember the object's type:
   global odl_types_array
   set odl_types_array($handle) madExp

   # Install the array of object parameters:
   global ${handle}_array
   set ${handle}_array(fileName) ""
   set ${handle}_array(id) ""
   set ${handle}_array(url) ""
   set ${handle}_array(name) ""
   set ${handle}_array(siteID) ""
   set ${handle}_array(startDate) ""
   set ${handle}_array(startTime) ""
   set ${handle}_array(endDate) ""
   set ${handle}_array(endTime) ""
   set ${handle}_array(instrumentCode) ""
   set ${handle}_array(securityCode) ""
   set ${handle}_array(metadataDirectory) "0"
   set ${handle}_array(madroot) "0"
   set ${handle}_array(makesolaris) "0"
   set ${handle}_array(ccsolaris) "0"
   set ${handle}_array(fcsolaris) "0"
   set ${handle}_array(makegnu) "0"
   set ${handle}_array(ccgnu) "0"
   set ${handle}_array(fcgnu) "0"
   set ${handle}_array(tcllibdir) "0"
   set ${handle}_array(tklibdir) "0"
   set ${handle}_array(tcllib) "0"
   set ${handle}_array(tklib) "0"
   set ${handle}_array(tclinclude) "0"
   set ${handle}_array(tkinclude) "0"
   set ${handle}_array(tclsh) "0"
   set ${handle}_array(tcllibpath) "0"
   set ${handle}_array(madserver) "0"
   set ${handle}_array(madserverroot) "0"
   set ${handle}_array(madservercgi) "0"
   set ${handle}_array(madserverservlet) "0"
   set ${handle}_array(madserverdocabs) "0"
   set ${handle}_array(madservercgiabs) "0"
   set ${handle}_array(madserverservletabs) "0"
   set ${handle}_array(siteid) "0"
   set ${handle}_array(htmlstyl) "0"
   set ${handle}_array(indexhead) "0"
   set ${handle}_array(contact) "0"
   set ${handle}_array(notesmanager) "0"


   # Install a proc that will serve as the "object command":
   proc $handle {cmd args} "return \[eval objdisp_madExp $handle \$cmd \$args\]"

   # Now configure using the other args:
   eval $handle configure $args

   # Call the object's initialization proc
   madExp_init $handle
}



proc madExp_delete {handle} {

   # Call the object's exit proc
   madExp_exit $handle
   catch { rename $handle {} }
   global ${handle}_array
   unset ${handle}_array
}



proc objdisp_madFile {handle cmd args} {
   upvar #0 ${handle}_array local_array

   if { $cmd == "configure" } {
      foreach { opt val } $args {
         if { ![regexp {^-(.+)} $opt dummy small_opt] } {
         } else {
            set local_array($small_opt) $val
         }
      }
      return 1
   }

   if { $cmd == "cget" } {
      set opt [lindex $args 0]
      if { ![regexp {^-(.+)} $opt dummy small_opt] } {
         puts "Wrong or missing option name $opt"
         return ""
      }
      return $local_array($small_opt)
   }

   if { $cmd == "read" } {
      if { [ llength $args ] == 0 } {
         return [ eval madFile_read $handle ]
      } else {
         return [ eval madFile_read $handle $args ]
      }
   }

   if { $cmd == "write" } {
      if { [ llength $args ] == 0 } {
         return [ eval madFile_write $handle ]
      } else {
         return [ eval madFile_write $handle $args ]
      }
   }

   if { $cmd == "getEntries" } {
      if { [ llength $args ] == 0 } {
         return [ eval madFile_getEntries $handle ]
      } else {
         return [ eval madFile_getEntries $handle $args ]
      }
   }

   if { $cmd == "addFile" } {
      if { [ llength $args ] == 0 } {
         return [ eval madFile_addFile $handle ]
      } else {
         return [ eval madFile_addFile $handle $args ]
      }
   }

   if { $cmd == "print" } {
      if { [ llength $args ] == 0 } {
         return [ eval madFile_print $handle ]
      } else {
         return [ eval madFile_print $handle $args ]
      }
   }

   puts "Unknown command $cmd"
}

proc madFile {handle args} {
   # Remember the object's type:
   global odl_types_array
   set odl_types_array($handle) madFile

   # Install the array of object parameters:
   global ${handle}_array
   set ${handle}_array(fileName) ""
   set ${handle}_array(name) ""
   set ${handle}_array(experimentID) ""
   set ${handle}_array(dataTypeCode) ""
   set ${handle}_array(category) ""
   set ${handle}_array(spare1) ""
   set ${handle}_array(hasCatalog) ""
   set ${handle}_array(hasHeader) ""
   set ${handle}_array(spare4) ""
   set ${handle}_array(spare5) ""
   set ${handle}_array(spare6) ""
   set ${handle}_array(spare7) ""
   set ${handle}_array(metadataDirectory) "0"
   set ${handle}_array(madroot) "0"
   set ${handle}_array(makesolaris) "0"
   set ${handle}_array(ccsolaris) "0"
   set ${handle}_array(fcsolaris) "0"
   set ${handle}_array(makegnu) "0"
   set ${handle}_array(ccgnu) "0"
   set ${handle}_array(fcgnu) "0"
   set ${handle}_array(tcllibdir) "0"
   set ${handle}_array(tklibdir) "0"
   set ${handle}_array(tcllib) "0"
   set ${handle}_array(tklib) "0"
   set ${handle}_array(tclinclude) "0"
   set ${handle}_array(tkinclude) "0"
   set ${handle}_array(tclsh) "0"
   set ${handle}_array(tcllibpath) "0"
   set ${handle}_array(madserver) "0"
   set ${handle}_array(madserverroot) "0"
   set ${handle}_array(madservercgi) "0"
   set ${handle}_array(madserverservlet) "0"
   set ${handle}_array(madserverdocabs) "0"
   set ${handle}_array(madservercgiabs) "0"
   set ${handle}_array(madserverservletabs) "0"
   set ${handle}_array(siteid) "0"
   set ${handle}_array(htmlstyl) "0"
   set ${handle}_array(indexhead) "0"
   set ${handle}_array(contact) "0"
   set ${handle}_array(notesmanager) "0"


   # Install a proc that will serve as the "object command":
   proc $handle {cmd args} "return \[eval objdisp_madFile $handle \$cmd \$args\]"

   # Now configure using the other args:
   eval $handle configure $args

   # Call the object's initialization proc
   madFile_init $handle
}



proc madFile_delete {handle} {

   # Call the object's exit proc
   madFile_exit $handle
   catch { rename $handle {} }
   global ${handle}_array
   unset ${handle}_array
}



proc objdisp_madData {handle cmd args} {
   upvar #0 ${handle}_array local_array

   if { $cmd == "configure" } {
      foreach { opt val } $args {
         if { ![regexp {^-(.+)} $opt dummy small_opt] } {
         } else {
            set local_array($small_opt) $val
         }
      }
      return 1
   }

   if { $cmd == "cget" } {
      set opt [lindex $args 0]
      if { ![regexp {^-(.+)} $opt dummy small_opt] } {
         puts "Wrong or missing option name $opt"
         return ""
      }
      return $local_array($small_opt)
   }

   if { $cmd == "read" } {
      if { [ llength $args ] == 0 } {
         return [ eval madData_read $handle ]
      } else {
         return [ eval madData_read $handle $args ]
      }
   }

   if { $cmd == "write" } {
      if { [ llength $args ] == 0 } {
         return [ eval madData_write $handle ]
      } else {
         return [ eval madData_write $handle $args ]
      }
   }

   if { $cmd == "getEntries" } {
      if { [ llength $args ] == 0 } {
         return [ eval madData_getEntries $handle ]
      } else {
         return [ eval madData_getEntries $handle $args ]
      }
   }

   if { $cmd == "addFile" } {
      if { [ llength $args ] == 0 } {
         return [ eval madData_addFile $handle ]
      } else {
         return [ eval madData_addFile $handle $args ]
      }
   }

   if { $cmd == "print" } {
      if { [ llength $args ] == 0 } {
         return [ eval madData_print $handle ]
      } else {
         return [ eval madData_print $handle $args ]
      }
   }

   puts "Unknown command $cmd"
}

proc madData {handle args} {
   # Remember the object's type:
   global odl_types_array
   set odl_types_array($handle) madData

   # Install the array of object parameters:
   global ${handle}_array
   set ${handle}_array(fileName) ""
   set ${handle}_array(day) ""
   set ${handle}_array(experimentID) ""
   set ${handle}_array(dataTypeCode) ""
   set ${handle}_array(metadataDirectory) "0"
   set ${handle}_array(madroot) "0"
   set ${handle}_array(makesolaris) "0"
   set ${handle}_array(ccsolaris) "0"
   set ${handle}_array(fcsolaris) "0"
   set ${handle}_array(makegnu) "0"
   set ${handle}_array(ccgnu) "0"
   set ${handle}_array(fcgnu) "0"
   set ${handle}_array(tcllibdir) "0"
   set ${handle}_array(tklibdir) "0"
   set ${handle}_array(tcllib) "0"
   set ${handle}_array(tklib) "0"
   set ${handle}_array(tclinclude) "0"
   set ${handle}_array(tkinclude) "0"
   set ${handle}_array(tclsh) "0"
   set ${handle}_array(tcllibpath) "0"
   set ${handle}_array(madserver) "0"
   set ${handle}_array(madserverroot) "0"
   set ${handle}_array(madservercgi) "0"
   set ${handle}_array(madserverservlet) "0"
   set ${handle}_array(madserverdocabs) "0"
   set ${handle}_array(madservercgiabs) "0"
   set ${handle}_array(madserverservletabs) "0"
   set ${handle}_array(siteid) "0"
   set ${handle}_array(htmlstyl) "0"
   set ${handle}_array(indexhead) "0"
   set ${handle}_array(contact) "0"
   set ${handle}_array(notesmanager) "0"


   # Install a proc that will serve as the "object command":
   proc $handle {cmd args} "return \[eval objdisp_madData $handle \$cmd \$args\]"

   # Now configure using the other args:
   eval $handle configure $args

   # Call the object's initialization proc
   madData_init $handle
}



proc madData_delete {handle} {

   # Call the object's exit proc
   madData_exit $handle
   catch { rename $handle {} }
   global ${handle}_array
   unset ${handle}_array
}



proc objdisp_madInventory {handle cmd args} {
   upvar #0 ${handle}_array local_array

   if { $cmd == "configure" } {
      foreach { opt val } $args {
         if { ![regexp {^-(.+)} $opt dummy small_opt] } {
         } else {
            set local_array($small_opt) $val
         }
      }
      return 1
   }

   if { $cmd == "cget" } {
      set opt [lindex $args 0]
      if { ![regexp {^-(.+)} $opt dummy small_opt] } {
         puts "Wrong or missing option name $opt"
         return ""
      }
      return $local_array($small_opt)
   }

   if { $cmd == "read" } {
      if { [ llength $args ] == 0 } {
         return [ eval madInventory_read $handle ]
      } else {
         return [ eval madInventory_read $handle $args ]
      }
   }

   if { $cmd == "write" } {
      if { [ llength $args ] == 0 } {
         return [ eval madInventory_write $handle ]
      } else {
         return [ eval madInventory_write $handle $args ]
      }
   }

   if { $cmd == "getEntries" } {
      if { [ llength $args ] == 0 } {
         return [ eval madInventory_getEntries $handle ]
      } else {
         return [ eval madInventory_getEntries $handle $args ]
      }
   }

   if { $cmd == "print" } {
      if { [ llength $args ] == 0 } {
         return [ eval madInventory_print $handle ]
      } else {
         return [ eval madInventory_print $handle $args ]
      }
   }

   puts "Unknown command $cmd"
}

proc madInventory {handle args} {
   # Remember the object's type:
   global odl_types_array
   set odl_types_array($handle) madInventory

   # Install the array of object parameters:
   global ${handle}_array
   set ${handle}_array(fileName) "inventTabDate.txt"
   set ${handle}_array(experimentID) ""
   set ${handle}_array(experimentURL) ""
   set ${handle}_array(databaseSiteID) ""
   set ${handle}_array(experimentStartDate) ""
   set ${handle}_array(experimentStartTime) ""
   set ${handle}_array(experimentEndDate) ""
   set ${handle}_array(experimentEndTime) ""
   set ${handle}_array(instrumentCode) ""
   set ${handle}_array(instrumentMnemonic) ""
   set ${handle}_array(instrumentName) ""
   set ${handle}_array(experimentName) ""
   set ${handle}_array(metadataDirectory) "0"
   set ${handle}_array(madroot) "0"
   set ${handle}_array(makesolaris) "0"
   set ${handle}_array(ccsolaris) "0"
   set ${handle}_array(fcsolaris) "0"
   set ${handle}_array(makegnu) "0"
   set ${handle}_array(ccgnu) "0"
   set ${handle}_array(fcgnu) "0"
   set ${handle}_array(tcllibdir) "0"
   set ${handle}_array(tklibdir) "0"
   set ${handle}_array(tcllib) "0"
   set ${handle}_array(tklib) "0"
   set ${handle}_array(tclinclude) "0"
   set ${handle}_array(tkinclude) "0"
   set ${handle}_array(tclsh) "0"
   set ${handle}_array(tcllibpath) "0"
   set ${handle}_array(madserver) "0"
   set ${handle}_array(madserverroot) "0"
   set ${handle}_array(madservercgi) "0"
   set ${handle}_array(madserverservlet) "0"
   set ${handle}_array(madserverdocabs) "0"
   set ${handle}_array(madservercgiabs) "0"
   set ${handle}_array(madserverservletabs) "0"
   set ${handle}_array(siteid) "0"
   set ${handle}_array(htmlstyl) "0"
   set ${handle}_array(indexhead) "0"
   set ${handle}_array(contact) "0"
   set ${handle}_array(notesmanager) "0"


   # Install a proc that will serve as the "object command":
   proc $handle {cmd args} "return \[eval objdisp_madInventory $handle \$cmd \$args\]"

   # Now configure using the other args:
   eval $handle configure $args

   # Call the object's initialization proc
   madInventory_init $handle
}



proc madInventory_delete {handle} {

   # Call the object's exit proc
   madInventory_exit $handle
   catch { rename $handle {} }
   global ${handle}_array
   unset ${handle}_array
}



proc delete {args} {
   global odl_types_array
   foreach handle $args {
      $odl_types_array($handle)_delete $handle
   }
}



proc mem {handle args} {
   upvar #0 ${handle}_array local_array
   foreach nam $args {
      upvar $nam tmp
      set tmp $local_array($nam)
   }
}


package provide mtl 1.0
