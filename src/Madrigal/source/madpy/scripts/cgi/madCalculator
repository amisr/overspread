#!PYTHONEXE

import sys, os, traceback
import cgi, Cookie
import time
import os.path
import madrigal._Madrec




class MadrigalCalculator:
    """MadrigalCalculator is the class that produces the MadrigalCalculator page.
    
    MadrigalCalculator has the following structure:  the entire cgi is contained in one class, with a
    main function at the end which serves simply to call the __init__  function of the class.  This
    __init__ function is responsible for calling all other class methods. It is made up of a single
    try block, with the purpose of reporting all exceptions in well-formatted html to both the user
    and the administrator. The __init__ function first makes sure the pythonlib can be found.  It
    then calls setScriptState to determine from any cgi arguments what the script is supposed to do.
    The script state is always set in self.state.  The particular values allowed for MadrigalCalculator
    are discussed below.

    The __init__ function then calls createObjects to create whatever python api objects are required
    to complete the script.  If the user has made a request that may succeed or may fail, that request is
    then processed.  The script thereafter calls outputHead to output the header section and any required
    javascript.  Finally, __init__ calls a few functions for each of the main sections of the body.

    If any uncaught exception is thrown, its caught by the __init__ try block.  If it's a MadrigalError,
    additional information is available.  The catch blocks attempt to display the error message on the screen
    by backing out of of large number of possible tags, which might prevent its display (in any case, the error
    message will always be available in the page source.  The formatted error message is also sent to the email
    address given in the siteTab.txt metadata file.

    Every attempt is made to generate easy to read source html, since it is often an easy starting point for
    analyzing the script.  Table structure is indicated by indentation, as is javascript code structure.
  
  

    Change history:

    Written by "William Rideout":mailto:brideout@haystack.mit.edu  May 7, 2003

    $Id: madCalculator,v 1.9 2009/03/10 17:00:11 brideout Exp $
    """

    # constants
    __scriptName = 'madCalculator'

    # number of parameters per column
    maxParmCols = 5
   
    def __init__(self):
        """__init__ run the entire MadrigalCalculator script.  All other functions are private and called by __init__.

        Inputs: None
        
        Returns: void

        Affects: Ouputs cgi script MadrigalCalculator.

        Exceptions: None.
        """


        # catch any exception, and write an appropriate message to user and to admin
        try:

            # check if pythonlibpath env variable exists
            # written 'PYTHON' + 'LIBPATH' to stop automatic replacement during setup
            temp = os.environ.get('PYTHON' + 'LIBPATH')
            if temp != None:
                    sys.path.append(temp)
		    
            # append path madroot/lib (needed only if python not installed by setup)
            sys.path.append('MADROOT/lib/python')

            # prepare to handle MadrigalError
            import madrigal.admin
	    
        except ImportError:
	    
	    # Fatal error - madpy library not found
            print "Content-Type: text/html"
            print
            print "Unable to import the madrigal python library - please alert the sys admin!"
            sys.exit(0)
	    
        try:

            # set flag as to whether script headers have been written
            self.scriptHeaders = 0
            
            # determine from form arguments and cookies which script state to use
            self.setScriptState()
            
            # create needed Madrigal objects
            self.createObjects()

            # process requested login or password change
            self.success = ''
            
            # output html

            #print header
            self.outputHead('Madrigal Calculator')

            #print body tag
            print self.madDBObj.getHtmlStyle()

            self.printHeading()

            self.printDescription()

            self.printTimeSpaceTables()

            self.printParameters()

            self.printEndPage()

            

        except madrigal.admin.MadrigalError, e:
            # handle a MadrigalError

            # back out of any tag so error message appears
            if self.scriptHeaders != 0:
                print '</script></select></td></tr></table></td></tr></table>'
                
            errStr = '<h1> Error occurred in script ' + self.__scriptName + '.</h1>'

            errStr = errStr + e.getExceptionHtml()
            
            err = traceback.format_exception(sys.exc_info()[0],
                                             sys.exc_info()[1],
                                             sys.exc_info()[2])

            for errItem in err:
                errStr = errStr + '<br>\n' + str(errItem)

        
            # add info about called form:
            if self.madForm != None:
                errStr = errStr + '<h3>Form elements</h3>\n'
                for key in self.madForm.keys():
                    errStr = errStr + '<br>\n' + str(key)
                    errStr = errStr + ' = ' + str(self.madForm.getvalue(key))

            if self.scriptHeaders == 0: # not yet printed
                print "Content-Type: text/html"
                print
                
            print errStr + '<BR>'

            self.admin = madrigal.admin.MadrigalNotify()
            self.admin.sendAlert('<html>\n' + errStr + '</html>',
                                 'Error running ' + self.__scriptName)


            print '<br><b>Your system administrator has been notified.<b>'

        except SystemExit:
            sys.exit(0)

        except:
            # handle a normal error
            
            # back out of any tag so error message appears
            if self.scriptHeaders != 0:
                print '</script></select></td></tr></table></td></tr></table>'
                
            errStr = '<h1> Error occurred in script ' + self.__scriptName + '.</h1>'

            
            err = traceback.format_exception(sys.exc_info()[0],
                                             sys.exc_info()[1],
                                             sys.exc_info()[2])

            for errItem in err:
                errStr = errStr + '<br>\n' + str(errItem)

        
            # add info about called form:
            if self.madForm != None:
                errStr = errStr + '<h3>Form elements</h3>\n'
                for key in self.madForm.keys():
                    errStr = errStr + '<br>\n' + str(key)
                    errStr = errStr + ' = ' + str(self.madForm.getvalue(key))

            if self.scriptHeaders == 0: # not yet printed
                print "Content-Type: text/html"
                print
                
            print errStr + '<BR>'

            self.admin = madrigal.admin.MadrigalNotify()
            self.admin.sendAlert('<html>\n' + errStr + '</html>',
                                 'Error running ' + self.__scriptName)


            print '<br><b>Your system administrator has been notified.<b>'

        # end __init__


    def setScriptState(self):
        
        #create a form object
        self.madForm = cgi.FieldStorage()

        self.state = 'default'
                    

    def createObjects(self):

        # MadrigalDB object
        import madrigal.metadata
        self.madDBObj = madrigal.metadata.MadrigalDB()

        # if madroot not set, set it now
        if os.environ.get('MAD' + 'ROOT') == None:
            os.environ['MAD' + 'ROOT'] = self.madDBObj.getMadroot()

        # create object for MadrigalParameters
        import madrigal.data
        self.madParametersObj = madrigal.data.MadrigalParameters(self.madDBObj)

        # getting a list of derivable parameters for a given point         
        self.parameterList = madrigal._Madrec.getDerivableParms(['gdlat','glon','gdalt'])
 
        # get category dict
        self.categoryDict = self.madParametersObj.getCategoryDict(self.parameterList)

        # get mnemonic list
        self.mnemonicList = self.madParametersObj.getParmMnemonicList(self.parameterList)

        # get description list
        self.descList = self.madParametersObj.getParmDescriptionList(self.parameterList)

        # create a MadrigalWeb object
        import madrigal.ui.web
        self.madWebObj = madrigal.ui.web.MadrigalWeb(self.madDBObj)

        
    def outputHead(self, title):

        print "Content-Type: text/html"
        print                               # blank line
        self.scriptHeaders = 1
        print '<html>'
        print '<head>'
        print '\t<title>' + title + '</title>'
        print '\t<style type="text/css">.lb {background: #eeeeff}</style>'
        self.printJavaScript()
        print '</head>'


    def printJavaScript(self):

        print '<script language = "JavaScript">'
        self.printTrim()
        self.printIsFloat()
        self.printInRange()
        self.printValidate()
        self.printPopup()
        self.printGetDesc()
        self.printMLookup()
        self.printCParamDiction()
        self.printCalculate()
        print '</script>'


    def printTrim(self):
        
        print '\tfunction trim(strText)'
        print '\t{'
        print '\t\t// this will get rid of leading spaces'
        print '\t\twhile (strText.substring(0,1) == \' \')'
        print '\t\t\tstrText = strText.substring(1, strText.length);'
        print '\t\t// this will get rid of trailing spaces'
        print '\t\twhile (strText.substring(strText.length-1,strText.length) == \' \')'
        print '\t\t\tstrText = strText.substring(0, strText.length-1);'
        print '\t\treturn strText;'
        print '\t}\n'


    def printIsFloat(self):
        
        print '\tfunction isFloat(textObj)'
        print '\t{'
        print '\t\tvar newValue = trim(textObj.value);'
        print '\t\tvar newLength = newValue.length;'
        print '\t\tfor (var i = 0; i != newLength; i++)'
        print '\t\t{'
        print '\t\t\taChar = newValue.substring(i,i+1);'
        print '\t\t\tif((aChar < "0" || aChar > "9") && (aChar != ".") && (aChar != "-") && (aChar != "e") && (aChar != "E"))'
        print '\t\t\t{'
        print '\t\t\t\treturn false;'
        print '\t\t\t}'
        print '\t\t}'
        print '\t\treturn true;'
        print '\t}\n'


    def printInRange(self):
        print '\tfunction inRange(num, lowerLimit, upperLimit)'
        print '\t{'
        print '\t\tif(num >= lowerLimit && num <= upperLimit)'
        print '\t\t{'
        print '\t\t\treturn true;'
        print '\t\t}'
        print '\t\tif(typeof num != "number")'
        print '\t\t{'
        print '\t\t\treturn true;'
        print '\t\t}'
        print '\t\treturn false;'
        print '\t}\n'


    def printValidate(self):
        # check that all values are valid via javascript before form submitted
        print '\tfunction validate(madForm)'
        print '\t{'

        # start_lat
        print '\t\tif (!isFloat(madForm.start_lat))'
        print '\t\t{'
        print '\t\t\talert("Invalid entry for start latitude.  Please correct and try again.");'
        print '\t\t\treturn false;'
        print '\t\t}'
        print '\t\tif (!inRange(parseFloat(madForm.start_lat.value), -90.0, 90.0) && madForm.start_lat.value.length != 0)'
        print '\t\t{'
        print '\t\t\talert("Invalid entry for start latitude.  Must be between -90.0 and 90.0 degrees.");'
        print '\t\t\treturn false;'
        print '\t\t}'

        # stop_lat
        print '\t\tif (!isFloat(madForm.stop_lat))'
        print '\t\t{'
        print '\t\t\talert("Invalid entry for stop latitude.  Please correct and try again.");'
        print '\t\t\treturn false;'
        print '\t\t}'
        print '\t\tif (!inRange(parseFloat(madForm.stop_lat.value), -90.0, 90.0) && madForm.stop_lat.value.length != 0)'
        print '\t\t{'
        print '\t\t\talert("Invalid entry for stop latitude.  Must be between -90.0 and 90.0 degrees.");'
        print '\t\t\treturn false;'
        print '\t\t}'

        # step_lat
        print '\t\tif (!isFloat(madForm.step_lat))'
        print '\t\t{'
        print '\t\t\talert("Invalid entry for step latitude.  Please correct and try again.");'
        print '\t\t\treturn false;'
        print '\t\t}'
        print '\t\tif (!inRange(parseFloat(madForm.step_lat.value), 0.001, 180.0) && madForm.step_lat.value.length != 0)'
        print '\t\t{'
        print '\t\t\talert("Invalid entry for step latitude.  Must be between 0.001 and 180.0 degrees.");'
        print '\t\t\treturn false;'
        print '\t\t}'

        # start_lat < stop_lat
        print '\t\tif (parseFloat(madForm.start_lat.value) > parseFloat(madForm.stop_lat.value))'
        print '\t\t{'
        print '\t\t\talert("Start latitude must be less than stop latitude.");'
        print '\t\t\treturn false;'
        print '\t\t}'

        # start_lon
        print '\t\tif (!isFloat(madForm.start_lon))'
        print '\t\t{'
        print '\t\t\talert("Invalid entry for start longitude.  Please correct and try again.");'
        print '\t\t\treturn false;'
        print '\t\t}'
        print '\t\tif (!inRange(parseFloat(madForm.start_lon.value), -180.0, 1800.0) && madForm.start_lon.value.length != 0)'
        print '\t\t{'
        print '\t\t\talert("Invalid entry for start longitude.  Must be between -180.0 and 180.0 degrees.");'
        print '\t\t\treturn false;'
        print '\t\t}'

        # stop_lon
        print '\t\tif (!isFloat(madForm.stop_lon))'
        print '\t\t{'
        print '\t\t\talert("Invalid entry for stop longitude.  Please correct and try again.");'
        print '\t\t\treturn false;'
        print '\t\t}'
        print '\t\tif (!inRange(parseFloat(madForm.stop_lon.value), -180.0, 180.0) && madForm.stop_lon.value.length != 0)'
        print '\t\t{'
        print '\t\t\talert("Invalid entry for stop longitude.  Must be between -180.0 and 180.0 degrees.");'
        print '\t\t\treturn false;'
        print '\t\t}'

        # step_lon
        print '\t\tif (!isFloat(madForm.step_lon))'
        print '\t\t{'
        print '\t\t\talert("Invalid entry for step longitude.  Please correct and try again.");'
        print '\t\t\treturn false;'
        print '\t\t}'
        print '\t\tif (!inRange(parseFloat(madForm.step_lon.value), 0.001, 360.0) && madForm.step_lon.value.length != 0)'
        print '\t\t{'
        print '\t\t\talert("Invalid entry for step longitude.  Must be between 0.001 and 360.0 degrees.");'
        print '\t\t\treturn false;'
        print '\t\t}'

        # start_lon < stop_lon
        print '\t\tif (parseFloat(madForm.start_lon.value) > parseFloat(madForm.stop_lon.value))'
        print '\t\t{'
        print '\t\t\talert("Start longitude must be less than stop longitude.");'
        print '\t\t\treturn false;'
        print '\t\t}'

        # start_alt
        print '\t\tif (!isFloat(madForm.start_alt))'
        print '\t\t{'
        print '\t\t\talert("Invalid entry for start altitude.  Please correct and try again.");'
        print '\t\t\treturn false;'
        print '\t\t}'
        print '\t\tif (parseFloat(madForm.start_alt.value) < 0)'
        print '\t\t{'
        print '\t\t\talert("Invalid entry for start altitude.  Must be greater than 0.");'
        print '\t\t\treturn false;'
        print '\t\t}'

        # stop_alt
        print '\t\tif (!isFloat(madForm.stop_alt))'
        print '\t\t{'
        print '\t\t\talert("Invalid entry for stop altitude.  Please correct and try again.");'
        print '\t\t\treturn false;'
        print '\t\t}'
        print '\t\tif (parseFloat(madForm.stop_alt.value) < 0)'
        print '\t\t{'
        print '\t\t\talert("Invalid entry for stop altitude.  Must be greeater than 0.");'
        print '\t\t\treturn false;'
        print '\t\t}'

        # step_alt
        print '\t\tif (!isFloat(madForm.step_alt))'
        print '\t\t{'
        print '\t\t\talert("Invalid entry for step altitude.  Please correct and try again.");'
        print '\t\t\treturn false;'
        print '\t\t}'
        print '\t\tif (parseFloat(madForm.step_alt.value) < 0.001)'
        print '\t\t{'
        print '\t\t\talert("Invalid entry for step altitude.  Must be greeater than 0.001");'
        print '\t\t\treturn false;'
        print '\t\t}'

        # start_alt < stop_alt
        print '\t\tif (parseFloat(madForm.start_alt.value) > parseFloat(madForm.stop_alt.value))'
        print '\t\t{'
        print '\t\t\talert("Start altitude must be less than stop altitude.");'
        print '\t\t\treturn false;'
        print '\t\t}'

        # verify date
        print '\t\ttry'
        print '\t\t{'
        print '\t\t\tvar thisDate = new Date();'
        print '\t\t\tthisDate.setFullYear(madForm.year.value);'
        print '\t\t\tthisDate.setMonth(madForm.month.value - 1);'
        print '\t\t\tthisDate.setDate(madForm.day.value);'
        print '\t\t\tthisDate.setHours(madForm.hour.value);'
        print '\t\t\tthisDate.setMinutes(madForm.min.value);'
        print '\t\t\tthisDate.setSeconds(madForm.sec.value);'
        print '\t\t\tif (thisDate.getMonth() != (madForm.month.value - 1))'
        print '\t\t\t{'
        print '\t\t\t\talert("Illegal date");'
        print '\t\t\t\treturn false;'
        print '\t\t\t}'
        print '\t\t}catch(e){'
        print '\t\t\talert("Illegal date");'
        print '\t\t\treturn false;'
        print '\t\t}'
            
        print '\t\treturn true;'
        print '\t}\n'
    

    def printPopup(self):

        print '\tfunction popup(acronym)'
        print '\t{'
        print '\t\tinfo2 = window.open ("","","WIDTH=600,HEIGHT=400,SCROLLBARS=yes")'
        print '\t\tinfo2.document.write("<HTML><HEAD><TITLE>" + acronym + "<\/TITLE>")'
        print '\t\tinfo2.document.write("' + self.madDBObj.getHtmlStyle() + '")'
        print '\t\tinfo2.document.write("<CENTER><B>")'
        print '\t\tinfo2.document.write(acronym)'
        print '\t\tinfo2.document.write("<\/B><\/CENTER><P>")'
        print '\t\tinfo2.document.write(getDesc(acronym))'
        print '\t\tinfo2.document.write(\'<p><form><center><input type="button" value="Close Window" onClick="window.close()">\')'
        print '\t\tinfo2.document.write(\'<\/form><\/center>\')'
        print '\t\tinfo2.document.write("<\/BODY><\/HTML>")'
        print '\t\tinfo2.document.close()'
        print '\t}\n'


    def printGetDesc(self):

        print '\tfunction getDesc(name)'
        print '\t{'
        print '\t\tvar o = new cParamDiction()'
        print '\t\treturn(o.Lookup(name))'
        print '\t}\n'


    def printMLookup(self):

        print '\tfunction mLookup(strKeyName)'
        print '\t{'
        print '\t\treturn(this[strKeyName])'
        print '\t}\n'


    def printCParamDiction(self):

        print '\t// A dictionary object of Parameters and Descriptions:'
        print '\tfunction cParamDiction()'
        print '\t{'
        print '\t\tthis.Lookup = mLookup'
        i = 0
        for parm in self.mnemonicList:
                print '\t\tthis["' + parm + \
                      '"] = "' + self.descList[i].replace('</', '<\/') + '"'
                i = i + 1
        print '\t}\n'
    

    def printCalculate(self):

        print '\tfunction calculate(madForm)'
        print '\t{'
        print '\t\tif (!validate(madForm))'
        print '\t\t{'
        print '\t\t\treturn false;'
        print '\t\t}'
        print '\t\tmadForm.action="madRecDisplay.cgi"'
        print '\t\tmadForm.target="_parent"'
        print '\t\tmadForm.submit()'
        print '\t}\n'

    # end javascript
    

    def printHeading(self):

        print '<p><h1><B><center>Madrigal calculator</center></B></h1>'
        
       
    def printDescription(self):

        print '<form action="madRecDisplay.cgi" method=get>'          #begin form
        print '<p>This page will calculate any Madrigal parameter(s) you select for a single given '
        print 'time and range of latitude, longitude, and altitude.<p>'
        print '<i>Select the ranges of latitude, longitude, and altitude, and time:</i>'

        
    def printTimeSpaceTables(self):
        
        print '<br>'
        print '<table cellpadding=10 align=center>'
        print '<tr>'

        print '<td>'
        print '<table cellpadding=5 border="border">'
        print '<caption>'
        print 'Output Table Grid'
        print '</caption>'
        print '<tr valign=center>'
        print '<td align=center></td>'
        print '<td align=center>start</td>'
        print '<td align=center>end</td>'
        print '<td align=center>delta</td>'
        print '</tr>'
        print '<tr valign=center>'
        print '<td align=right>latitude</td>'

        print '<td align=left>'
        print '<input name="start_lat" value="-90.0" size=6 maxlength=10>'
        print '</td>'
        print '<td align=left>'
        print '<input name="stop_lat" value="90.0" size=6 maxlength=10>'
        print '</td>'
        print '<td align=left>'
        print '<input name="step_lat" value="45.0" size=6 maxlength=10>'
        print '</td>'
        print '</tr>'
        print '<tr valign=center>'
        print '<td align=right>longitude</td>'
        print '<td align=left>'
        print '<input name="start_lon" value="-180.0" size=6 maxlength=10>'
        print '</td>'
        print '<td align=left>'

        print '<input name="stop_lon" value="180.0" size=6 maxlength=10>'
        print '</td>'
        print '<td align=left>'
        print '<input name="step_lon" value="90.0" size=6 maxlength=10>'
        print '</td>'
        print '</tr>'
        print '<tr valign=center>'
        print '<td align=right>altitude</td>'
        print '<td align=left>'
        print '<input name="start_alt" value="0.0" size=6 maxlength=10>'
        print '</td>'
        print '<td align=left>'
        print '<input name="stop_alt" value="600.0" size=6 maxlength=10>'
        print '</td>'
        print '<td align=left>'
        print '<input name="step_alt" value="200.0" size=6 maxlength=10>'

        print '</td>'
        print '</tr>'
        print '</table>'
        print '</td>'
        print '</tr>'
        print '<tr>'
        print '<td valign=top>'
        print '<table cellpadding=5 border="border" width=100%>'
        print '<caption>'
        print 'Time (UT)'
        print '</caption>'
        print '<tr valign=center>'
        print '<td align=center>year</td>'
        print '<td align=center>month</td>'
        print '<td align=center>day</td>'

        print '<td align=center>hour</td>'
        print '<td align=center>min</td>'
        print '<td align=center>sec</td>'
        print '</tr>'
        print '<tr valign=center>'
        print '<td align=center>'
        print '<input name="year" value="2000" size=4 maxlength=4>'
        print '</td>'
        print '<td align=left>'
        print '<input name="month" value="1" size=4 maxlength=4>'
        print '</td>'
        print '<td align=left>'
        print '<input name="day" value="1" size=4 maxlength=4>'
        print '</td>'

        print '<td align=left>'
        print '<input name="hour" value="0" size=4 maxlength=4>'
        print '</td>'
        print '<td align=left>'
        print '<input name="min" value="0" size=4 maxlength=4>'
        print '</td>'
        print '<td align=left>'
        print '<input name="sec" value="0" size=4 maxlength=4>'
        print '</td>'
        print '</tr>'
        print '</table>'
        print '</td>'
        print '</tr>'
        print '</table>'

    def printParameters(self):

        print '<p><i>Select any of the following Madrigal parameters to calculate:</i><br>'
        
        # loop through each parameter category
        keyList = self.categoryDict.keys()
        keyList.sort()
        for key in keyList:
            item = self.categoryDict[key]
            catName = item[0]
            parmList = item[1]
            # skip categories that don't make sense
            if catName.find("Time Related Parameter") != -1:
                continue
            if catName.find("Prolog") != -1:
                continue
            if catName.find("Radar") != -1:
                continue
            self.printCategoryTableIntro(catName)
            # set up count of number printed this column
            numThisCol = 1
            # set up parameter index
            parmIndex = -1
            # now loop through each parameter
            for parm in parmList:
                # skip some parameters that don't make sense without a set kinst
                if parm in ('AZM','ELM','GALTR','GDLONR','GDLATR','RANGE', 'ASPECT'):
                    continue
                parmIndex = parmIndex + 1
                # print the parameter
                self.printParameterCheckbox(parm, parmIndex)
                numThisCol = numThisCol + 1
                # check if category done
                if parmIndex + 1 == len(item[1]):
                    # fill up the rest of the cols with blanks
                    self.fillRowWithBlanks(self.maxParmCols + 1 - numThisCol)

                # check if new row needed
                if numThisCol > self.maxParmCols:
                    print '\t\t</tr><tr>'
                    numThisCol = 1

            print '\t\t</tr></table></ul></ul>'

  
    def printCategoryTableIntro(self, categoryName):

        print '\t\t<ul><br><b>' + categoryName + '</b>'
        print '\t\t<ul><table COLS=' + str(self.maxParmCols) + ' WIDTH="80%"><tr>'


    def printParameterCheckbox(self, parm, parmIndex):

        print '\t\t\t<td width="' + str(100.0/self.maxParmCols) + \
              '%"><input class="lb" type=checkbox name="pList" value="' + \
              str(parm) + '"'
        # check whether selected
        if self.madForm.getvalue(str(parm)) != None:
            print '\t\t\t\tchecked '
        elif self.state == 'default' and parm == 'UTH':
            print '\t\t\t\tchecked '
        
        print '\t\t\t\t>&nbsp;<a href=JavaScript:popup("' + \
                  parm + '")>' + parm + '</a></td>'


    def fillRowWithBlanks(self, num):

        if num < 0 or num > self.maxParmCols:
            return
        while (num):
            print '\t\t\t<td width="' + str(100.0/self.maxParmCols) + '%">&nbsp;</td>'
            num = num - 1
        
    
    def printEndPage(self):

        self.printButtons()
        print '</form></body></html>'       # end form, body, and html 


    def printButtons(self):

        print '<center><p>'
        print '<input type="reset" value="Reset">'
        print '<input name="Calculate" class=lb type="button"'
        print '\tonclick="calculate(this.form)" value="Calculate">'
        print '</p></center>'


    
          

if __name__ == '__main__':

    # Script madParmList
    # This script only calls the init function of the class MadrigalCalculator
    # All work is done by the init function
    MadrigalCalculator()
