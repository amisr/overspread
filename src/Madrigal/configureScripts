# Loops over all tcl and madtcl scripts in source/madtcl/bin
# and  source/madtcl/cgi and source/madtcl/lib, and also python cgi scripts in
# source/madpy/scripts/cgi, and edits them to use the site-specific
# definitions in madrigal.cfg and copies the resulting configured file to
# MADROOT/bin or MADSERVERCGI. If arguments are present, only files
# in the argument list are processed.

# usage: configureScripts [files]

# $Id: configureScripts,v 1.21 2009/04/29 14:33:28 brideout Exp $

proc testPerm { fname } {
    # return 1 if permission should be changed, 0 if not
    # wants permission to be 775 or 777
    set perm [file attributes $fname -permissions]
    set user [string index $perm end-2]
    set group [string index $perm end-1]
    set other [string index $perm end]
    if {$user != 7} {
        return 1
    } elseif {$group != 7} {
        return 1
    } elseif {$other < 5} {
        return 1
    } elseif {$other == 6} {
        return 1
    } else {
        return 0
    }
}

set nargs $argc

# Extract configuration variables from madrigal.cfg
set fc [open madrigal.cfg r]
while {[gets $fc line] >= 0} {
    if {[regexp -- ^# $line] || [string length $line] == 0} {continue}
    scan $line "%s %s %s" name equals value
    if {$equals == "="} {
        if {$name == "PYTHONEXE" || $name == "TCLLIBPATH"} {
	    continue 
	}
        set cmd [list set $name [string range $line [string first $value $line] end]]
        eval $cmd
        set vars [lappend vars $name]
    }
}

# Get the variable values and sort so that longest variable names
# are checked first
foreach var $vars {
    upvar 0 $var varval
    set varlen [string length $var]
    set varlists [lappend varlists [list $var $varval $varlen]]
}
set varlists [lsort -integer -decreasing -index end $varlists]

# Get madroot and madservercgiabs
foreach varlist $varlists {
    set var [lindex $varlist 0]
    set varval [lindex $varlist 1]
    if {$var == "MADROOT"} {set madroot $varval}
    if {$var == "MADSERVERCGIABS"} {set madservercgiabs $varval}
} 

# PYTHONEXE now always default value
set templist [list "PYTHONEXE" $madroot/bin/python]
lappend varlists $templist
set PYTHONEXE $madroot/bin/python


# Create the cgi directory
file mkdir $madservercgiabs
set TCLLIBPATH $madroot/madtcllib
file mkdir $TCLLIBPATH
file mkdir $TCLLIBPATH/cgi
file mkdir $TCLLIBPATH/mtl

# Replace all variable names by their values and copy the scripts
# to the bin or cgi directory
set fp [open $madroot/MANIFEST r]
while {[gets $fp f] >= 0} {
    if {[string match "source/madtcl/bin/*" $f] || \
        [string match "source/madtcl/cgi/*" $f] || \
	[string match "source/madtcl/lib/cgi/*" $f] || \
	[string match "source/madtcl/lib/mtl/*" $f] || \
	[string match "source/madpy/scripts/bin/*" $f] || \
	[string match "source/madpy/madrigalWeb/globalIsprint.py" $f] || \
	[string match "source/madpy/madrigalWeb/test*" $f] || \
	[string match "source/madpy/scripts/cgi/*" $f]} {
        if {[string match "source/madtcl/bin/*" $f] || \
	    [string match "source/madpy/madrigalWeb/globalIsprint.py" $f] || \
	    [string match "source/madpy/madrigalWeb/test*" $f] || \
	    [string match "source/madpy/scripts/bin/*" $f]} {
            set fb $madroot/bin/[file tail $f]
        }
        if {[string match "source/madtcl/cgi/*" $f] || \
	    [string match "source/madpy/scripts/cgi/*" $f]} {
            set fb $madservercgiabs/[file tail $f]
        }
	if {[string match "source/madtcl/lib/cgi/*" $f]} {
            set fb $TCLLIBPATH/cgi/[file tail $f]
	}
	if {[string match "*configureExperiments*" $f]} {
            set fb $madroot/configureExperiments
	}
	if {[string match "source/madtcl/lib/mtl/*" $f]} {
            set fb $TCLLIBPATH/mtl/[file tail $f]
	}
        set ix [lsearch -exact $argv [file tail $f]]
        if {$argc == 0 || $ix >= 0} {
            set fpl [open $madroot/$f r]
            set fpn [open $fb w]
            puts "$madroot/$f -> $fb"
            while {[gets $fpl line] >= 0} {
                foreach varlist $varlists {
                    set var [lindex $varlist 0]
                    set varval [lindex $varlist 1]
                    regsub $var $line $varval line
                }
                puts $fpn $line
            }    
            close $fpn
            close $fpl
            if {[testPerm $fb] == 1} {
                file attributes $fb -permissions 00775
            }
        }
    }
}
