#!/Users/mnicolls/Documents/Work/Madrigal/bin/python

import sys, os, traceback
import os.path
import cgi, Cookie



class MadrigalParmOverview:
    """MadrigalParmOverview is the class that produces the Madrigal parameter overview page.

    Like all my python cgi scripts, MadrigalParmOverview has the following structure:  the entire cgi is
    contained in one class, with a main function at the end which serves simply to call the __init__
    function of the class.  This __init__ function is responsible for calling all other class methods.
    It is made up of a single try block, with the purpose of reporting all exceptions in well-formatted
    html to both the user and the administrator. The __init__ function first makes sure the pythonlib
    can be found.  

    The __init__ function then calls createObjects to create whatever python api objects are required
    to complete the script  The script then calls outputHead to output the header section and any required
    javascript.  Finally, __init__ calls a few functions for each of the main sections of the body.

    If any uncaught exception is thrown, its caught by the __init__ try block.  If its an MadrigalError,
    additional information is available.  The catch blocks attempt to display the error message on the screen
    by backing out of of large number of possible tags, which might prevent its display (in any case, the error
    message will always be available in the page source.  The formatted error message is also sent to the email
    address given in the siteTab.txt metadata file.

    Every attempt is made to generate easy to read source html, since it is often an easy starting point for analyzing
    the script.  Table structure is indicated by indentation, as is javascript code structure.

    All the python cgi scripts maintain state through form elements, either visible on the page, or as hidden elements.
    The names of all form elements used by madEditFilter are listed below:

    fileName:           gives the name of the file being analyzed, either relative to the experiments directory (in which
                        case it does not begin with a forward slash, or absolute path (in which case is begins with a
                        forward slash.)  

    timeStr:            passed in from madDataBrowse - displayed at top
                        
    kinstStr:           passed in from madDataBrowse - displayed at top

    measList:           passed in from madDataBrowse - used to create parameter list

    derivList:          passed in from madDataBrowse - used to create parameter list

    bothList:           passed in from madDataBrowse - used to create parameter list

    
    Change history:

    Written by "Bill Rideout":mailto:wrideout@haystack.mit.edu  Jan. 10, 2002

    $Id: madParmOverview,v 1.13 2008/07/25 18:55:30 brideout Exp $
    """

    # constants
    __scriptName = 'madParmOverview'

    # states the script can be in: save, saveAck
    

    def __init__(self):
        """__init__ runs the entire MadrigalParmOverview script.  All other functions are private and called by __init__.

        Inputs: None
        
        Returns: void

        Affects: Ouputs cgi script MadrigalParmOverview.

        Exceptions: None.
        """
        
        # catch any exception, and write an appropriate message to user and to admin
        try:

            # check if pythonlibpath env variable exists
            # written 'PYTHON' + 'LIBPATH' to stop automatic replacement during setup
            temp = os.environ.get('PYTHON' + 'LIBPATH')
            if temp != None:
                    sys.path.append(temp)
                    
            # append path madroot/lib (needed only if python not installed by setup)
            sys.path.append('/Users/mnicolls/Documents/Work/Madrigal/lib/python')

            # prepare to handle MadrigalError
            import madrigal.admin
            
        except ImportError:
            
            # Fatal error - madpy library not found
            print "Content-Type: text/html"
            print
            print "Unable to import the madrigal python library - please alert the sys admin!"
            sys.exit(0)
            
        try:

            # set flag as to whether script headers have been written
            self.scriptHeaders = 0

            
            # create needed Madrigal objects
            self.createObjects()


            # output html

            #print header
            self.outputHead('Overview of ' + self.basename)

            #print body tag
            print self.madDBObj.getHtmlStyle()

            self.printHeading()


            self.printParmTable()


            self.printEndPage()


        except madrigal.admin.MadrigalError, e:
            # handle a MadrigalError

            # back out of any tag so error message appears
            if self.scriptHeaders != 0:
                print '</script></select></td></tr></table></td></tr></table>'
                
            errStr = '<h1> Error occurred in script ' + self.__scriptName + '.</h1>'

            errStr = errStr + e.getExceptionHtml()
            
            err = traceback.format_exception(sys.exc_info()[0],
                                             sys.exc_info()[1],
                                             sys.exc_info()[2])

            for errItem in err:
                errStr = errStr + '<br>\n' + str(errItem)

        
            # add info about called form:
            if self.madForm != None:
                errStr = errStr + '<h3>Form elements</h3>\n'
                for key in self.madForm.keys():
                    errStr = errStr + '<br>\n' + str(key)
                    errStr = errStr + ' = ' + str(self.madForm.getvalue(key))

            if self.scriptHeaders == 0: # not yet printed
                print "Content-Type: text/html"
                print
                
            print errStr + '<BR>'

            self.admin = madrigal.admin.MadrigalNotify()
            self.admin.sendAlert('<html>\n' + errStr + '</html>',
                                 'Error running ' + self.__scriptName)


            print '<br><b>Your system administrator has been notified.<b>'

        except SystemExit:
            sys.exit(0)

        except:
            # handle a normal error
            
            # back out of any tag so error message appears
            if self.scriptHeaders != 0:
                print '</script></select></td></tr></table></td></tr></table>'
                
            errStr = '<h1> Error occurred in script ' + self.__scriptName + '.</h1>'

            
            err = traceback.format_exception(sys.exc_info()[0],
                                             sys.exc_info()[1],
                                             sys.exc_info()[2])

            for errItem in err:
                errStr = errStr + '<br>\n' + str(errItem)

        
            # add info about called form:
            if self.madForm != None:
                errStr = errStr + '<h3>Form elements</h3>\n'
                for key in self.madForm.keys():
                    errStr = errStr + '<br>\n' + str(key)
                    errStr = errStr + ' = ' + str(self.madForm.getvalue(key))

            if self.scriptHeaders == 0: # not yet printed
                print "Content-Type: text/html"
                print
                
            print errStr + '<BR>'

            self.admin = madrigal.admin.MadrigalNotify()
            self.admin.sendAlert('<html>\n' + errStr + '</html>',
                                 'Error running ' + self.__scriptName)


            print '<br><b>Your system administrator has been notified.<b>'

        # end __init__




    def createObjects(self):

        #create a form object
        self.madForm = cgi.FieldStorage()

        # all states require a MadrigalDB object
        import madrigal.metadata
        self.madDBObj = madrigal.metadata.MadrigalDB()

        # if madroot not set, set it now
        if os.environ.get('MAD' + 'ROOT') == None:
            os.environ['MAD' + 'ROOT'] = self.madDBObj.getMadroot()

        # create a MadrigalWeb object
        import madrigal.ui.web
        self.madWebObj = madrigal.ui.web.MadrigalWeb(self.madDBObj)


        # create a Madrigal parameter object
        import madrigal.data
        self.madParmObj = madrigal.data.MadrigalParameters(self.madDBObj)

        # check that element fileName was passed in
        if not self.madForm.has_key('fileName'):
            if  self.scriptHeaders == 0:
                print "Content-Type: text/html\n"

            print '<h3> This cgi script was called without the proper arguments.</h3>' + \
                  'Since this script uses post, you cannot bookmark this page. ' + \
                  'Please contact your site administrator with any questions.'

            sys.exit(0)

        # get base file name
        self.basename = os.path.basename(self.madForm.getvalue('fileName'))

        self.populateParmlist()



    def populateParmlist(self):


        # get list of parmeters as integer list from form elements
        
        self.measList = self.madForm.getvalue('measList').split('%20')

        self.derivList = self.madForm.getvalue('derivList').split('%20')

        self.bothList = self.madForm.getvalue('bothList').split('%20')

        

    def outputHead(self, title):

        print "Content-Type: text/html"
        print                               # blank line, end of headers
        self.scriptHeaders = 1
        print '<html>'
        print '<head>'
        print '\t<title>' + title + '</title>'
        print '\t<style type="text/css">.lb {background: #ADD8E6}</style>'
        print '</head>'

        
        

    def printHeading(self):
        print '<h2>Madrigal</h2>'
        print '<h2>Overview of ' + self.basename + '</h2>'
        print '<hr>' + self.madWebObj.getSpaceString(self.madForm.getvalue('timeStr')) + \
              ' ' + self.madWebObj.getSpaceString(self.madForm.getvalue('kinstStr'))
        print '<hr><h3>Parameters</h3>'
        print '<i>(parameters with regular typeface are derived)</i><br>'




    def printParmTable(self):
        print '<table BORDER CELLPADDING=10 COLS=3 WIDTH="80%">'

        for parm in self.bothList:
            print '\t<tr>'
            if parm in self.measList:
                print '\t\t<td align=right width="15%"><b>' + self.madParmObj.getParmMnemonic(parm) + '</b></td>'
                print '\t\t<td align=left width="85%"><b>' + self.madParmObj.getParmDescription(parm) + '</b></td>'
            else:
                print '\t\t<td align=right width="15%">' + self.madParmObj.getParmMnemonic(parm) + '</td>'
                print '\t\t<td align=left width="85%">' + self.madParmObj.getParmDescription(parm) + '</td>'
            print '\t</tr>'
        print '</table>'
            




    def printEndPage(self):
        print '</body></html>'


   
   
        
            

if __name__ == '__main__':

    # Script madLogin
    # This script only calls the init function of the class MadrigalParmOverview
    # All work is done by the init function
    MadrigalParmOverview()
