#!/Users/mnicolls/Documents/Work/Madrigal/bin/python

import sys, os, traceback
import cgi, Cookie
import time
import types





class GetEmail:
    """MadrigalSearch is the class that produces the GetEmail page.
    
    GetEmail has the following structure:  the entire cgi is contained in one class, with a
    main function at the end which serves simply to call the __init__  function of the class.  This
    __init__ function is responsible for calling all other class methods. It is made up of a single
    try block, with the purpose of reporting all exceptions in well-formatted html to both the user
    and the administrator. The __init__ function first makes sure the pythonlib can be found.  It
    then calls setScriptState to determine from any cgi arguments what the script is supposed to do.
    The script state is always set in self.state.  The particular values allowed for GetEmail
    are discussed below.

    The __init__ function then calls createObjects to create whatever python api objects are required
    to complete the script.  If the user has made a request that may succeed or may fail, that request is
    then processed.  The script thereafter calls outputHead to output the header section and any required
    javascript.  Finally, __init__ calls a few functions for each of the main sections of the body.

    If any uncaught exception is thrown, its caught by the __init__ try block.  If it's a MadrigalError,
    additional information is available.  The catch blocks attempt to display the error message on the screen
    by backing out of of large number of possible tags, which might prevent its display (in any case, the error
    message will always be available in the page source.  The formatted error message is also sent to the email
    address given in the siteTab.txt metadata file.

    Every attempt is made to generate easy to read source html, since it is often an easy starting point for
    analyzing the script.  Table structure is indicated by indentation, as is javascript code structure.

    Allowed values of self.state:

    'default':          Default when page is called.

    'inst_chosen':      Instruments have been chosen and page reloads to get kindats specific to chosen instruments.

    'parm_chosen':      Parameters have been chosen and page relaods to let users continue selecting search criteria.


    All the python cgi scripts maintain state through form elements, either visible on the page, or as hidden elements.
    The names of all form elements used by madSearch are listed below:

    calling page:       gives the name of the file being analyzed, either relative to the experiments directory (in which
			case it does not begin with a forward slash, or absolute path (in which case is begins with a
			forward slash.)  Stored as hidden element.  


    state:	        gives the state of the script (see above).  Defaults to 'edit' if not passed in. Stored as hidden
                        element and modified by javascript.

    stationName:        a select input giving the list of instruments available. Defaults to 'All Instruments'.

    kindatName:         a select input giving the list of kinds of data available. Defaults to 'All kinds of data'.

    sd:                 an input text field giving the start day to select data - integer.

    sm:                 an input text field giving the start month to select data - integer (1-12)

    sy:                 an input text field giving the start year to select data - validated as integer.

    ed:                 an input text field giving the end day to select data - integer.

    em:                 an input text field giving the end month to select data - integer (1-12)

    ey:                 an input text field giving the end year to select data - validated as integer.

    ssd:                an input text field giving the seasonal start day to select data - integer.

    ssm:                an input text field giving the seasonal start month to select data - integer (1-12)

    sed:                an input text field giving the seasonal end day to select data - integer.

    sem:                an input text field giving the seasonal end month to select data - integer (1-12)
        
    keywordsearch:      an input text field giving the experiment name to enter partial keyword of experiment

    header:             a check box giving the option show a header or vice versa

    emailAddress:       an input text field in GetEmailFromUser that gets the user's emaill address

                           
    
    Change history:

    Written by "Ezinne Uzo-Okoro":mailto:euzookoro@haystack.mit.edu  July 31, 2002

    $Id: GetEmailFromUser,v 1.13 2008/09/02 15:14:54 brideout Exp $
    """

    
    # constants
    __scriptName = 'GetEmail'
    
    # states the script can be entered

    def __init__(self):
        """__init__ run the entire GetEmail script.  All other functions are private and called by __init__.

        Inputs: None
        
        Returns: void

        Affects: Ouputs cgi script genMadReport.

        Exceptions: None.
        """


        # catch any exception, and write an appropriate message to user and to admin
        try:

            # check if pythonlibpath env variable exists
            # written 'PYTHON' + 'LIBPATH' to stop automatic replacement during setup
            temp = os.environ.get('PYTHON' + 'LIBPATH')
            if temp != None:
                    sys.path.append(temp)
		    
            # append path madroot/lib (needed only if python not installed by setup)
	    sys.path.append('/Users/mnicolls/Documents/Work/Madrigal/lib/python')

            # prepare to handle MadrigalError
            import madrigal.admin
	    
        except ImportError:
	    
	    # Fatal error - madpy library not found
	    print "Content-Type: text/html"
            print
	    print "Unable to import the madrigal python library - please alert the sys admin!"
	    sys.exit(0)
	    
        try:

            # set flag as to whether script headers have been written
            self.scriptHeaders = 0
            
            # determine from form arguments and cookies which script state to use
            self.setScriptState()
            
            # create needed Madrigal objects
            self.createObjects()

            # process requested login or password change
            self.success = ''
            
            # output html

            #print header
            self.outputHead('Get Email')

            #print body tag
            print self.madDBObj.getHtmlStyle()

            self.printHeading()

            self.printDescription()

            self.printHiddenElements()

            self.getemailaddress()

            self.printEndPage()

            

        except madrigal.admin.MadrigalError, e:
            # handle a MadrigalError

            # back out of any tag so error message appears
            if self.scriptHeaders != 0:
                print '</script></select></td></tr></table></td></tr></table>'
                
            errStr = '<h1> Error occurred in script ' + self.__scriptName + '.</h1>'

            errStr = errStr + e.getExceptionHtml()
            
            err = traceback.format_exception(sys.exc_info()[0],
                                             sys.exc_info()[1],
                                             sys.exc_info()[2])

            for errItem in err:
                errStr = errStr + '<br>\n' + str(errItem)

        
            # add info about called form:
            if self.madForm != None:
                errStr = errStr + '<h3>Form elements</h3>\n'
                for key in self.madForm.keys():
                    errStr = errStr + '<br>\n' + str(key)
                    errStr = errStr + ' = ' + str(self.madForm.getvalue(key))

	    if self.scriptHeaders == 0: # not yet printed
                print "Content-Type: text/html"
                print
                
            print errStr + '<BR>'

            self.admin = madrigal.admin.MadrigalNotify()
            self.admin.sendAlert('<html>\n' + errStr + '</html>',
                                 'Error running ' + self.__scriptName)


            print '<br><b>Your system administrator has been notified.<b>'

        except SystemExit:
            sys.exit(0)

        except:
            # handle a normal error
            
            # back out of any tag so error message appears
            if self.scriptHeaders != 0:
                print '</script></select></td></tr></table></td></tr></table>'
                
            errStr = '<h1> Error occurred in script ' + self.__scriptName + '.</h1>'

            
            err = traceback.format_exception(sys.exc_info()[0],
                                             sys.exc_info()[1],
                                             sys.exc_info()[2])

            for errItem in err:
                errStr = errStr + '<br>\n' + str(errItem)

        
            # add info about called form:
            if self.madForm != None:
                errStr = errStr + '<h3>Form elements</h3>\n'
                for key in self.madForm.keys():
                    errStr = errStr + '<br>\n' + str(key)
                    errStr = errStr + ' = ' + str(self.madForm.getvalue(key))

	    if self.scriptHeaders == 0: # not yet printed
                print "Content-Type: text/html"
                print
                
            print errStr + '<BR>'

            self.admin = madrigal.admin.MadrigalNotify()
            self.admin.sendAlert('<html>\n' + errStr + '</html>',
                                 'Error running ' + self.__scriptName)


            print '<br><b>Your system administrator has been notified.<b>'

        # end __init__


    def setScriptState(self):
        
        #create a form object
	self.madForm = cgi.FieldStorage()

	if not self.madForm.has_key('stationName'):
            self.state = 'default'
        else:
            self.state = 'inst_chosen'

        # get name, email, affiliation from cookie
        self.cookie = Cookie.SimpleCookie()
        if os.environ.has_key('HTTP_COOKIE'):
            self.hasCookie = True
            self.cookie.load(os.environ['HTTP_COOKIE'])
            try:
                self.user_fullname = self.cookie["user_fullname"].value
                self.user_email = self.cookie["user_email"].value
                self.user_affiliation = self.cookie["user_affiliation"].value
            except:
                self.user_fullname = None
                self.user_email = None
                self.user_affiliation = None
                    

        else:
            # no cookie exists
            self.user_fullname = None
            self.user_email = None
            self.user_affiliation = None
            self.hasCookie = False


    def createObjects(self):

        # all states require a MadrigalDB object
        import madrigal.metadata
        self.madDBObj = madrigal.metadata.MadrigalDB()

        # if madroot not set, set it now
	if os.environ.get('MAD' + 'ROOT') == None:
	    os.environ['MAD' + 'ROOT'] = self.madDBObj.getMadroot()

        # create object for MadrigalInstrument
        self.madInstrumentObj = madrigal.metadata.MadrigalInstrument(self.madDBObj)

        # create object for MadrigalKindat
        self.madKindatObj = madrigal.metadata.MadrigalKindat(self.madDBObj)

        # create object for MadrigalParameters
        import madrigal.data
        self.madParametersObj = madrigal.data.MadrigalParameters(self.madDBObj)

        # create a MadrigalWeb object
	import madrigal.ui.web
	self.madWebObj = madrigal.ui.web.MadrigalWeb(self.madDBObj)


    def outputHead(self, title):

        print "Content-Type: text/html"
        print                               # blank line
        self.scriptHeaders = 1
        print '<html>'
        print '<head>'
        print '\t<title>' + title + '</title>'
        print '\t<style type="text/css">.lb {background: #eeeeff}</style>'
        self.printJavaScript()
        print '</head>'

    
    def printJavaScript(self):
        
        print '<script language = "JavaScript">'
        self.printTrim()
        self.printIsEmpty()
        self.printValidateEmail()
        self.gotomadSearch()
        self.printGetReport()
        print '</script>'


    def printTrim(self):
        
        print '\tfunction trim(strText)'
        print '\t{'
        print '\t\t// this will get rid of leading spaces'
        print '\t\twhile (strText.substring(0,1) == \' \')'
        print '\t\t\tstrText = strText.substring(1, strText.length);'
        print '\t\t// this will get rid of trailing spaces'
        print '\t\twhile (strText.substring(strText.length-1,strText.length) == \' \')'
        print '\t\t\tstrText = strText.substring(0, strText.length-1);'
        print '\t\treturn strText;'
        print '\t}\n'


    def printIsEmpty(self):
        
        print '\tfunction isEmpty(textObj)'
        print '\t{'
        print '\t\tvar newValue = trim(textObj.value);'
        print '\t\tvar newLength = newValue.length;'
        print '\t\tif(newLength == 0)'
        print '\t\t{'
        print '\t\t\treturn true;'
        print '\t\t}'
        print '\t\treturn false;'
        print '\t}\n'


    def printValidateEmail(self):
        
        # check that email isn't empty via javascript before form is submitted
        print '\tfunction validateEmail(madForm)'
        print '\t{'
        print '\t\tif (isEmpty(madForm.emailAddress))'
        print '\t\t{'
        print '\t\t\talert("Please enter an email address.");'
        print '\t\t\treturn false;'
        print '\t\t}'
        print '\t\treturn true;'
        print '\t}\n'


    def gotomadSearch(self):
        
        print '\tfunction gotomadSearch(madForm)'
        print '\t{'
        print '\t\tmadForm.action="madSearch"'
        print '\t\tmadForm.target=""'
        print '\t\tmadForm.submit()'
        print '\t}\n'

        
    def printGetReport(self):
        
        print '\tfunction getReport(madForm)'
        print '\t{'
        print '\t\tif (!validateEmail(madForm))'
        print '\t\t{'
        print '\t\t\treturn false;'
        print '\t\t}'
        print '\t\tmadForm.action="genMadReport"'
        print '\t\tmadForm.target=""'
        print '\t\tmadForm.submit()'
        print '\t}\n'


    def getvalues(self):

        # making parm list from all names with value = "on" except header, showKindat
        parmList = []
        for key in self.madForm.keys():
            if key in ('showKindat', 'header'):
                continue
            if self.madForm.getfirst(key) == 'on':
                parmList.append(key)


        # getting email
        email = self.madForm.getvalue("emailAddress")

        # getting keyword
        KeywordSearch = self.madForm.getvalue("keywordsearch")
        if KeywordSearch != None:
            KeywordSearch = '*' + KeywordSearch + '*'

        # getting "Show header" value
        Header = 0
        if self.madForm.has_key("header"):
            Header = 0
        else:
            Header = 1

        # getting dates   
        StartMonth = self.madForm.getvalue("sm")
        StartYear = self.madForm.getvalue("sy")
        StartDay = self.madForm.getvalue("sd")
        EndDay = self.madForm.getvalue("ed")
        EndMonth = self.madForm.getvalue("em")
        EndYear = self.madForm.getvalue("ey")

        # getting seasonal dates
        seasonalStartMonth = int(self.madForm.getvalue("ssm"))
        seasonalStartDay = int(self.madForm.getvalue("ssd"))
        seasonalEndDay = int(self.madForm.getvalue("sed"))
        seasonalEndMonth = int(self.madForm.getvalue("sem"))

        # converting seasonal dates to julian days
        startDayOfYear = time.gmtime(time.mktime((1972, seasonalStartMonth, seasonalStartDay, 0, 0, 0, 0, 0, -1)) - time.timezone)                       
        endDayOfYear = time.gmtime(time.mktime((1972, seasonalEndMonth, seasonalEndDay, 0, 0, 0, 0, 0, -1)) - time.timezone)
        
        # getting instrument list
        stationNameStr = self.madForm.getvalue("stationName")
        # checking for lists or strings and changing as appropriate
        if type(stationNameStr) != types.ListType:
            stationNameList = [stationNameStr]
        else:
            stationNameList = stationNameStr
        stationNameIntList = self.madWebObj.getIntListFromStrList(stationNameList)
        instrumentName = ''
        instrumentName == 'Station is ' + str(stationNameList)
        for name in stationNameIntList:
            if name == 0:
                instrumentName = "All Instruments"
                break
            else:
                if instrumentName == '':
                    instrumentName = str(self.madInstrumentObj.getInstrumentName(name))
                else:
                    instrumentName = instrumentName + ', ' + str(self.madInstrumentObj.getInstrumentName(name))
 
        #getting kindat list
        kindatNameStr = self.madForm.getvalue("kindatName")
        if type(kindatNameStr) == types.StringType:
            kindatNameList = [kindatNameStr]
        elif type(kindatNameStr) == types.ListType:
            kindatNameList = kindatNameStr
        else:
            kindatNameList = []

        if len(kindatNameList) != 0:
            kindatNameIntList = self.madWebObj.getIntListFromStrList(kindatNameList)
        else:
            kindatNameIntList = []
        # getting kindat descriptions for code names
        codeName = ''
        for code in kindatNameIntList:
            if code == 0:
                codeName = "\n\tAll Kinds of Data"
                break
            else:
                if codeName == '':
                    codeName = str(self.madKindatObj.getKindatDescription(code))
		else:
                    codeName = codeName + ', ' + str(self.madKindatObj.getKindatDescription(code))

        # get string describing filters
        filterStr = '<table>'
        for i in range(1, 6):
            mnemKey = 'mnemStr' + str(i)
            lowerKey = 'lower' + str(i)
            upperKey = 'upper' + str(i)
            if self.madForm.getvalue(mnemKey) != None:
                filterStr += '<tr><td><b>' + str(self.madForm.getvalue(mnemKey)) + '</b></td><td> Lower limit: '
                if self.madForm.getvalue(lowerKey) == None:
                    filterStr += 'None</td><td>Upper limit: '
                else:
                    filterStr += str(self.madForm.getvalue(lowerKey)) + '</td><td>Upper limit: '
                if self.madForm.getvalue(upperKey) == None:
                    filterStr += 'None</td></tr>'
                else:
                    filterStr += str(self.madForm.getvalue(upperKey)) + '</td></tr>'
        # check for no filter case
        if filterStr == '<table>':
            filterStr += '<tr><td>No filters entered</td></tr>'
        filterStr += '</table>'


        # getting string of email header
        querySummary  =    '<br><b>Instruments:</b> ' + str(instrumentName) + \
                           '<br><b>Kinds of Data:</b> ' +  str(codeName) + \
                           '<br><b>Experiment Name:</b> '

        if KeywordSearch == None:
            querySummary += 'All experiment names accepted'
        else:
            querySummary +=  str(KeywordSearch)
            
        querySummary +=    '<br><b>StartDate</b> = ' + str(StartDay) + \
                           '/' + str(StartMonth) + '/' + str(StartYear) + \
                           '<br><b>EndDate</b> = ' + str(EndDay) + '/' + str(EndMonth) + \
                           '/' + str(EndYear) + '<br><b>Seasonal filter</b> = ' + \
                           str(seasonalStartDay) + '/' + str(seasonalStartMonth) + \
                           ' - ' + str(seasonalEndDay) + '/' + str(seasonalEndMonth)

        if seasonalStartDay == 1 and seasonalStartMonth == 1 \
           and seasonalEndDay == 31 and seasonalEndMonth == 12:
            querySummary += ' (no seasonal filter)'

        delimiter = ', '
            
        querySummary += '<br><b>Data filters:</b><br>' + filterStr + \
                        '<br><b>Parameters displayed:</b> ' + delimiter.join(parmList) + '<p>'

        return querySummary


    def printHeading(self):
        
        print '<h1>The following is a summary of your requested query:</h1>'


    def printDescription(self):
        
        print '<form action=genMadReport method=get>'
        print self.getvalues()
        print '<p>Hit cancel to modify your query.'
        print '<p>Please enter your email address below and your requested report would be sent to your mail box.'
        print 'After you hit OK, an estimate of the time needed to run your query will be displayed, and then '
        print 'you will be returned to the main global search page.'

    def printHiddenElements(self):
        # now print all received post elements from madSearch as hidden elements
        # if form just loaded
        for key in self.madForm.keys():
            if str(key) == "emailAddress":
                continue
            if type(self.madForm.getvalue(key)) == types.ListType:
                for value in self.madForm.getvalue(key):
                    print '<input type=hidden name=' + str(key) + \
                          ' value=' + value + '>'
            else:
                print '<input type=hidden name=' + str(key) + \
                      ' value="' + cgi.escape(str(self.madForm.getvalue(key))) + '">'
                
                
    def getemailaddress(self):
        
        print '<center>'
        print '<FONT STYLE="font-size: 13pt" SIZE=5>'

        # if email add is got already, display it, else leave input text field blank for user
        if self.madForm.has_key("emailAddress"):
            print '<INPUT TYPE=TEXT NAME="emailAddress" VALUE="' + self.madForm.getvalue("emailAddress") +\
                '" SIZE=30 MAXLENGTH=35></FONT>'
        elif self.user_email != None:
            print '<INPUT TYPE=TEXT NAME="emailAddress" VALUE="' + self.user_email +\
                '" SIZE=30 MAXLENGTH=35></FONT>'
        else:
            print '<INPUT TYPE=TEXT NAME="emailAddress" VALUE="" SIZE=30 MAXLENGTH=35></FONT>'
        print '<p><input class=lb type=button value="Cancel" onClick=gotomadSearch(this.form)>'
        print '<input class=lb type=button value="  OK  " onClick=getReport(this.form)>'
        print '</center>'#</td></tr></TABLE>'

                
    def printEndPage(self):

        print '</form></body></html>'       # end body, form, and html 


    
          

if __name__ == '__main__':

    # Script GetEmail
    # This script only calls the init function of the class GetEmail
    # All work is done by the init function
    GetEmail()
