#!/Users/mnicolls/Documents/Work/Madrigal/bin/python

import sys, os, traceback
import cgi, Cookie
import time
import types
import os.path




class MadrigalParmList:
    """MadrigalSearch is the class that produces the MadrigalParmList page.
    
    MadrigalParmList has the following structure:  the entire cgi is contained in one class, with a
    main function at the end which serves simply to call the __init__  function of the class.  This
    __init__ function is responsible for calling all other class methods. It is made up of a single
    try block, with the purpose of reporting all exceptions in well-formatted html to both the user
    and the administrator. The __init__ function first makes sure the pythonlib can be found.  It
    then calls setScriptState to determine from any cgi arguments what the script is supposed to do.
    The script state is always set in self.state.  The particular values allowed for MadrigalParmList
    are discussed below.

    The __init__ function then calls createObjects to create whatever python api objects are required
    to complete the script.  If the user has made a request that may succeed or may fail, that request is
    then processed.  The script thereafter calls outputHead to output the header section and any required
    javascript.  Finally, __init__ calls a few functions for each of the main sections of the body.

    If any uncaught exception is thrown, its caught by the __init__ try block.  If it's a MadrigalError,
    additional information is available.  The catch blocks attempt to display the error message on the screen
    by backing out of of large number of possible tags, which might prevent its display (in any case, the error
    message will always be available in the page source.  The formatted error message is also sent to the email
    address given in the siteTab.txt metadata file.

    Every attempt is made to generate easy to read source html, since it is often an easy starting point for
    analyzing the script.  Table structure is indicated by indentation, as is javascript code structure.

    Allowed values of self.state:

    'default':          Default when page is called.

    'loaded':           Instruments have been chosen and page reloads to get kindats specific to chosen instruments.


    All the python cgi scripts maintain state through form elements, either visible on the page, or as hidden elements.
    The names of all form elements used by madSearch are listed below:

    calling page:       gives the name of the file being analyzed, either relative to the experiments directory (in which
			case it does not begin with a forward slash, or absolute path (in which case is begins with a
			forward slash.)  Stored as hidden element.  


    state:	        gives the state of the script (see above).  Defaults to 'edit' if not passed in. Stored as hidden
                        element and modified by javascript.

    stationName:        a select input giving the list of instruments available. Defaults to 'All Instruments'.

    kindatName:         a select input giving the list of kinds of data available. Defaults to 'All kinds of data'.

    sd:                 an input text field giving the start day to select data - integer.

    sm:                 an input text field giving the start month to select data - integer (1-12)

    sy:                 an input text field giving the start year to select data - validated as integer.

    ed:                 an input text field giving the end day to select data - integer.

    em:                 an input text field giving the end month to select data - integer (1-12)

    ey:                 an input text field giving the end year to select data - validated as integer.

    ssd:                an input text field giving the seasonal start day to select data - integer.

    ssm:                an input text field giving the seasonal start month to select data - integer (1-12)

    sed:                an input text field giving the seasonal end day to select data - integer.

    sem:                an input text field giving the seasonal end month to select data - integer (1-12)

    filters:            an input text field giving the paramter filters to enter filters in logical expressions
        
    keywordsearch:      an input text field giving the experiment name to enter partial keyword of experiment

    header:             a check box giving the option show a header or vice versa

    emailAddress:       an input text field in GetEmailFromUser that gets the user's emaill address

    filterStr:          gets the string value of paramter filters entered for printHiddenElements()
    
    filterList:         splits filterStr and converts it to a list
    
    categoryIndex:      sets up the category index
    
    numCategories:      checks the length and gets number in categoryList

    lastCategory:       sets up last category when printing parameters

    numThisCol:         gets number of columns to print parameters

    parmIndex:          sets up parameter index

  
  

    Change history:

    Written by "Ezinne Uzo-Okoro":mailto:euzookoro@haystack.mit.edu  July 31, 2002

    $Id: madParmList,v 1.16 2008/07/25 18:55:30 brideout Exp $
    """

    # constants
    __scriptName = 'madParmList'

    # number of parameters per column
    maxParmCols = 5
   
    def __init__(self):
        """__init__ run the entire MadrigalParmList script.  All other functions are private and called by __init__.

        Inputs: None
        
        Returns: void

        Affects: Ouputs cgi script MadrigalParmList.

        Exceptions: None.
        """


        # catch any exception, and write an appropriate message to user and to admin
        try:

            # check if pythonlibpath env variable exists
            # written 'PYTHON' + 'LIBPATH' to stop automatic replacement during setup
            temp = os.environ.get('PYTHON' + 'LIBPATH')
            if temp != None:
                    sys.path.append(temp)
		    
            # append path madroot/lib (needed only if python not installed by setup)
	    sys.path.append('/Users/mnicolls/Documents/Work/Madrigal/lib/python')

            # prepare to handle MadrigalError
            import madrigal.admin
	    
        except ImportError:
	    
	    # Fatal error - madpy library not found
	    print "Content-Type: text/html"
            print
	    print "Unable to import the madrigal python library - please alert the sys admin!"
	    sys.exit(0)
	    
        try:

            # set flag as to whether script headers have been written
            self.scriptHeaders = 0
            
            # determine from form arguments and cookies which script state to use
            self.setScriptState()
            
            # create needed Madrigal objects
            self.createObjects()

            # process requested login or password change
            self.success = ''
            
            # output html

            #print header
            self.outputHead('Madrigal: List of Parameters')

            #print body tag
            print self.madDBObj.getHtmlStyle()

            self.printHeading()

            self.printDescription()

            self.printHiddenElements()

            self.printParameters()

            self.printEndPage()

            

        except madrigal.admin.MadrigalError, e:
            # handle a MadrigalError

            # back out of any tag so error message appears
            if self.scriptHeaders != 0:
                print '</script></select></td></tr></table></td></tr></table>'
                
            errStr = '<h1> Error occurred in script ' + self.__scriptName + '.</h1>'

            errStr = errStr + e.getExceptionHtml()
            
            err = traceback.format_exception(sys.exc_info()[0],
                                             sys.exc_info()[1],
                                             sys.exc_info()[2])

            for errItem in err:
                errStr = errStr + '<br>\n' + str(errItem)

        
            # add info about called form:
            if self.madForm != None:
                errStr = errStr + '<h3>Form elements</h3>\n'
                for key in self.madForm.keys():
                    errStr = errStr + '<br>\n' + str(key)
                    errStr = errStr + ' = ' + str(self.madForm.getvalue(key))

	    if self.scriptHeaders == 0: # not yet printed
                print "Content-Type: text/html"
                print
                
            print errStr + '<BR>'

            self.admin = madrigal.admin.MadrigalNotify()
            self.admin.sendAlert('<html>\n' + errStr + '</html>',
                                 'Error running ' + self.__scriptName)


            print '<br><b>Your system administrator has been notified.<b>'

        except SystemExit:
            sys.exit(0)

        except:
            # handle a normal error
            
            # back out of any tag so error message appears
            if self.scriptHeaders != 0:
                print '</script></select></td></tr></table></td></tr></table>'
                
            errStr = '<h1> Error occurred in script ' + self.__scriptName + '.</h1>'

            
            err = traceback.format_exception(sys.exc_info()[0],
                                             sys.exc_info()[1],
                                             sys.exc_info()[2])

            for errItem in err:
                errStr = errStr + '<br>\n' + str(errItem)

        
            # add info about called form:
            if self.madForm != None:
                errStr = errStr + '<h3>Form elements</h3>\n'
                for key in self.madForm.keys():
                    errStr = errStr + '<br>\n' + str(key)
                    errStr = errStr + ' = ' + str(self.madForm.getvalue(key))

	    if self.scriptHeaders == 0: # not yet printed
                print "Content-Type: text/html"
                print
                
            print errStr + '<BR>'

            self.admin = madrigal.admin.MadrigalNotify()
            self.admin.sendAlert('<html>\n' + errStr + '</html>',
                                 'Error running ' + self.__scriptName)


            print '<br><b>Your system administrator has been notified.<b>'

        # end __init__


    def setScriptState(self):
        
        #create a form object
	self.madForm = cgi.FieldStorage()

        self.state = 'default'
        # see if any value except header == 'on'"
        for key in self.madForm.keys():
            if key.lower() == 'header':
                continue
            value = self.madForm.getvalue(key)
            if type(value) == types.StringType:
                if value.lower() == 'on':
                    self.state = 'loaded'
                    

    def createObjects(self):

        # all states require a MadrigalDB object
        import madrigal.metadata
        self.madDBObj = madrigal.metadata.MadrigalDB()

        # if madroot not set, set it now
	if os.environ.get('MAD' + 'ROOT') == None:
	    os.environ['MAD' + 'ROOT'] = self.madDBObj.getMadroot()

        # create object for MadrigalInstrument
        self.madInstrumentObj = madrigal.metadata.MadrigalInstrument(self.madDBObj)

        # create object for MadrigalParameters
        import madrigal.data
        self.madParametersObj = madrigal.data.MadrigalParameters(self.madDBObj)


        # getting a list of parameters from instrument list
        parmStr = self.madForm.getvalue("stationName")
        parmList = []
        if parmStr == None:
            parmList = []
        elif type(parmStr) != types.ListType:
            parmList = [int(parmStr)]
        elif type(parmStr) == types.ListType:
            for parm in parmStr:
                parmList.append(int(parm))
                
        self.parameterList = self.madParametersObj.getParametersForInstruments(parmList)
 
        # get category dict
        self.categoryDict = self.madParametersObj.getCategoryDict(self.parameterList)

        # get mnemonic list
        self.mnemonicList = self.madParametersObj.getParmMnemonicList(self.parameterList)

        # get description list
        self.descList = self.madParametersObj.getParmDescriptionList(self.parameterList)
        
        # create object for MadrigalKindat
        self.madKindatObj = madrigal.metadata.MadrigalKindat(self.madDBObj)

        # create a MadrigalWeb object
	import madrigal.ui.web
	self.madWebObj = madrigal.ui.web.MadrigalWeb(self.madDBObj)

        
    def outputHead(self, title):

        print "Content-Type: text/html"
        print                               # blank line
        self.scriptHeaders = 1
        print '<html>'
        print '<head>'
        print '\t<title>' + title + '</title>'
        print '\t<style type="text/css">.lb {background: #eeeeff}</style>'
        self.printJavaScript()
        print '</head>'


    def printJavaScript(self):

        print '<script language = "JavaScript">'
        self.printPopup()
        self.printGetDesc()
        self.printMLookup()
        self.printCParamDiction()
        self.printClosePage()
        print '</script>'
    

    def printPopup(self):

        print '\tfunction popup(acronym)'
        print '\t{'
        print '\t\tinfo2 = window.open ("","","WIDTH=600,HEIGHT=400,SCROLLBARS=yes")'
        print '\t\tinfo2.document.write("<HTML><HEAD><TITLE>" + acronym + "<\/TITLE>")'
        print '\t\tinfo2.document.write("' + self.madDBObj.getHtmlStyle() + '")'
        print '\t\tinfo2.document.write("<CENTER><B>")'
        print '\t\tinfo2.document.write(acronym)'
        print '\t\tinfo2.document.write("<\/B><\/CENTER><P>")'
        print '\t\tinfo2.document.write(getDesc(acronym))'
        print '\t\tinfo2.document.write(\'<p><form><center><input type="button" value="Close Window" onClick="window.close()">\')'
        print '\t\tinfo2.document.write(\'<\/form><\/center>\')'
        print '\t\tinfo2.document.write("<\/BODY><\/HTML>")'
        print '\t\tinfo2.document.close()'
        print '\t}\n'


    def printGetDesc(self):

        print '\tfunction getDesc(name)'
        print '\t{'
        print '\t\tvar o = new cParamDiction()'
        print '\t\treturn(o.Lookup(name))'
        print '\t}\n'


    def printMLookup(self):

        print '\tfunction mLookup(strKeyName)'
        print '\t{'
        print '\t\treturn(this[strKeyName])'
        print '\t}\n'


    def printCParamDiction(self):

        print '\t// A dictionary object of Parameters and Descriptions:'
        print '\tfunction cParamDiction()'
        print '\t{'
        print '\t\tthis.Lookup = mLookup'
        i = 0
        for parm in self.mnemonicList:
                print '\t\tthis["' + parm + \
                      '"] = "' + self.descList[i].replace('</', '<\/') + '"'
                i = i + 1
        print '\t}\n'
    

    def printClosePage(self):

        print '\tfunction ClosePage(madForm)'
        print '\t{'
        print '\t\tmadForm.action="madSearch"'
        print '\t\tmadForm.target="_parent"'
        print '\t\tmadForm.submit()'
        print '\t}\n'

    # end javascript
    

    def printHeading(self):

        print '<p><h1><B>Parameter List</B></h1>'
        
       
    def printDescription(self):

        print '<form method=get enctype="application/x-www-form-urlencoded">'          #begin form
        print '<p><font size=5>The following parameters correspond to the instruments you selected.'
        print 'Please check the parameters you would like to have in your report.</font>'
        
        
    def printHiddenElements(self):

        # now print all received post elements from madSearch as hidden elements
        # if form just loaded
        print '<input type=hidden name=callingpage value=madParmList>'
        self.elementsFromMadSearch = []
        for key in self.madForm.keys():
            # handling lists, strings, and the '<' and '>' signs in the parameter filters
            if str(key) == "filters":
                filterStr = self.madForm.getvalue(key)
                filterList = filterStr.split('\n')
                for filter in filterList:
                    if len(filter) == 0:
                        continue
                    print '<input type=hidden name=filters value="' + cgi.escape(filter.strip()) + '">'
            # -- everything else              
            if key in ("stationName", "kindatName","sd", "sm","sy", "ed","em", "showKindat",
                       "ey", "ssm", "ssd", "sed", "sem", "header", "keywordsearch", "emailAddress",
                       "mnemStr1", "lower1", "upper1", "mnemStr2", "lower2", "upper2",
                       "mnemStr3", "lower3", "upper3", "mnemStr4", "lower4", "upper4",
                       "mnemStr5", "lower5", "upper5"):
                self.elementsFromMadSearch.append(str(key))
                if type(self.madForm.getvalue(key)) == types.ListType:
                    for value in self.madForm.getvalue(key):
                        print '<input type=hidden name=' + str(key) + \
                              ' value=' + value + '>'
                else:
                    print '<input type=hidden name=' + str(key) + \
                              ' value="' + str(cgi.escape(self.madForm.getvalue(key))) + '">'



    def printParameters(self):
        
        # loop through each parameter category
        keyList = self.categoryDict.keys()
        keyList.sort()
        for key in keyList:
            item = self.categoryDict[key]
            catName = item[0]
            parmList = item[1]
            self.printCategoryTableIntro(catName)
            # set up count of number printed this column
            numThisCol = 1
            # set up parameter index
            parmIndex = -1
            # now loop through each parameter
            for parm in parmList:
                parmIndex = parmIndex + 1
                # print the parameter
                self.printParameterCheckbox(parm, parmIndex)
                numThisCol = numThisCol + 1
                # check if category done
                if parmIndex + 1 == len(item[1]):
                    # fill up the rest of the cols with blanks
                    self.fillRowWithBlanks(self.maxParmCols + 1 - numThisCol)

                # check if new row needed
                if numThisCol > self.maxParmCols:
                    print '\t\t</tr><tr>'
                    numThisCol = 1

            print '\t\t</tr></table></ul></ul>'

  
    def printCategoryTableIntro(self, categoryName):

        print '\t\t<ul><br><b>' + categoryName + '</b>'
        print '\t\t<ul><table COLS=' + str(self.maxParmCols) + ' WIDTH="80%"><tr>'


    def printParameterCheckbox(self, parm, parmIndex):

        print '\t\t\t<td width="' + str(100.0/self.maxParmCols) + \
              '%"><input class="lb" type=checkbox name=' + \
              str(parm)
        # check whether selected
        if self.madForm.getvalue(str(parm)) != None:
            print '\t\t\t\tchecked '
        elif self.state == 'default' and parm == 'UT1':
            print '\t\t\t\tchecked '
        
        print '\t\t\t\t>&nbsp;<a href=JavaScript:popup("' + \
                  parm + '")>' + parm + '</a></td>'


    def fillRowWithBlanks(self, num):

        if num < 0 or num > self.maxParmCols:
            return
        while (num):
            print '\t\t\t<td width="' + str(100.0/self.maxParmCols) + '%">&nbsp;</td>'
            num = num - 1
        
    
    def printEndPage(self):

        self.printButtons()
        print '</form></body></html>'       # end form, body, and html 


    def printButtons(self):

        print '<center><p>'
        print '<input type="reset" value="Reset">'
        print '<input class=lb type=button value="Done" onClick=ClosePage(this.form)>'
        print '</p></center>'


    
          

if __name__ == '__main__':

    # Script madParmList
    # This script only calls the init function of the class MadrigalParmList
    # All work is done by the init function
    MadrigalParmList()
