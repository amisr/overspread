<P>The madrec library (libmadrec.a) contains a comprehensive set of
C-language procedures for working with Cedar Database files, and recently
has been upgraded to work at a higher data level with both measured and derived data. 

<h4> Overview of file-level madrec API</h4>

As detailed in the synopsis of madrecOpen, five version of CEDAR file are
supported - Madrigal, Blocked Binary, Cbf, Unblocked binary and Ascii.
In addition, and entire file may be read into memory for rapid random
record access. When opening a file for reading, the madrec package is
able to determine the file version automatically. Data, header and
catalog records are all supported.  The Cedar format itself is
big-endian, but Madrec is endian-neutral and works on little endian as
well as big endian computers.</P>

<P>All methods in madc that return an array of any sort (char, int, or double)
allocate the returned array from the heap.  The user of this library is responsible
for freeing these arrays when done.  Some methods, such as cedarGetGeodetic,
also allocate arrays for pointers passed in as arguments.  This is the case when
the method is designed to return more than one array, as is the case with
cedarGetGeodetic.  See the documentation of the individual methods for details.</P>

<h4> Overview of data level maddata API</h4>

<p>
The maddata level exposes Madrigal in such a way that the user does not need to worry about 
whether data is measured in a file or derived. The user needs only deal with the abstact 
maddata data structure.The struct maddata is intented to provide easy
access to madrigal data from a single cedar file that
has been combined with derived parameters and has been
filtered.  The data is organized as follows:

<pre>

           Maddata           MadparmList
         |         |
         v         v
      Madcycle   Madfilter
         |
         v
      Madrecord

</pre>
<p>
  All data in this structure corresponds to Madrigal parameters,
  and so is referenced by its unique mnemonic, not by Cedar
  parameter codes.  All data is stored as doubles, with special
  values as defined in cedar.h.
<p>
  While this module is written in C and not C++; its methods
  and design are as close as I could get to object-oriented.
  Every data structure should be instantiated via a create*
  method and released via destroy*.  All other methods take
  the respective data structure pointer as the first argument.
  See usage in simpleMaddata.c.
<p>
  The Madrecord structure defined in this file differs from
  the Madrec structure defined in madrec.h in that the Madrecord
  struct does not care about the Cedar file format, or indeed
  in what way the data is stored.  It's basic unit of data is
  a double, not the 16 bit Int as in the Cedar format.
<p>
  The derivation engine behind this interface is defined in the
  private modules madDeriveEngine and madDeriveMethods.  Extending
  maddata simply involves adding new methods (and possibly
  parameters), as fully explained in madDeriveMethods.h.
<p>
  See the file simpleMaddata.c for example usage.
<p>
<hr>
